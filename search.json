[{"path":"https://flyconnectome.github.io/bancr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://flyconnectome.github.io/bancr/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://flyconnectome.github.io/bancr/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://flyconnectome.github.io/bancr/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://flyconnectome.github.io/bancr/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://flyconnectome.github.io/bancr/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://flyconnectome.github.io/bancr/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://flyconnectome.github.io/bancr/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://flyconnectome.github.io/bancr/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://flyconnectome.github.io/bancr/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://flyconnectome.github.io/bancr/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://flyconnectome.github.io/bancr/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://flyconnectome.github.io/bancr/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://flyconnectome.github.io/bancr/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://flyconnectome.github.io/bancr/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://flyconnectome.github.io/bancr/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://flyconnectome.github.io/bancr/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://flyconnectome.github.io/bancr/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://flyconnectome.github.io/bancr/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://flyconnectome.github.io/bancr/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://flyconnectome.github.io/bancr/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://flyconnectome.github.io/bancr/SUPPORT.html","id":null,"dir":"","previous_headings":"","what":"Getting help with bancr","title":"Getting help with bancr","text":"Thanks using bancr. ’re sorry ’re trouble, don’t worry, ’re help! get help quickly possible, please read following:","code":""},{"path":"https://flyconnectome.github.io/bancr/SUPPORT.html","id":"search","dir":"","previous_headings":"","what":"Search","title":"Getting help with bancr","text":"first thing see anyone problem : Search nat-user google group. Search GitHub issues bancr package. Search GitHub issues across whole natverse case problem related package. can add terms search search box top left page. solves problem, great!","code":""},{"path":"https://flyconnectome.github.io/bancr/SUPPORT.html","id":"known-problems","dir":"","previous_headings":"","what":"Known Problems","title":"Getting help with bancr","text":"need help known problem: found relevant thread nat-user google group: please reply . found GitHub issue: please reply details just like (click emoji button add thumbs ) let us know ’re trouble . ’ll need GitHub login . ’re sure: ask new question nat-user google group linking found.","code":""},{"path":"https://flyconnectome.github.io/bancr/SUPPORT.html","id":"new-problems","dir":"","previous_headings":"","what":"New Problems","title":"Getting help with bancr","text":"looks like new problem : just question: please ask nat-user google group. need report new bug: please file issue. ’re sure: please just ask nat-user google group! problem bug feature request, can easily return report - may able point existing report workaround.","code":""},{"path":"https://flyconnectome.github.io/bancr/SUPPORT.html","id":"good-questions-and-bug-reports","dir":"","previous_headings":"","what":"Good Questions and Bug Reports","title":"Getting help with bancr","text":"specific Include code triggered problem possible, make minimal reproducible example (reprex) much easier us help can run reprex machine without data. might want use sample data nat package help, refer publicly available data online. can use reprex package help prepare reprex. Read Get help! section tidyverse site information. Thanks help!","code":""},{"path":"https://flyconnectome.github.io/bancr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Alexnder Bates. Author, maintainer. Gregory Jefferis. Author.","code":""},{"path":"https://flyconnectome.github.io/bancr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Bates , Jefferis G (2025). bancr: R Client Access Brain Nerve Cord (BANC) Dataset. R package version 0.1.0, https://github.com/flyconnectome/bancr.","code":"@Manual{,   title = {bancr: R Client Access to the Brain And Nerve Cord (BANC) Dataset},   author = {Alexnder Bates and Gregory Jefferis},   year = {2025},   note = {R package version 0.1.0},   url = {https://github.com/flyconnectome/bancr}, }"},{"path":"https://flyconnectome.github.io/bancr/index.html","id":"bancr","dir":"","previous_headings":"","what":"R Client Access to the Brain And Nerve Cord (BANC) Dataset","title":"R Client Access to the Brain And Nerve Cord (BANC) Dataset","text":"goal bancr support analysis Brain Nerve Cord data set (BANC), especially auto-segmentation data. data made available BANC project led Wei-Chung Allen Lee (Harvard) collaborators including Zetta.ai FlyWire team Princeton. Anyone can request access data . Learn BANC wiki. access banc resources, must permissions access banc autosegmentation dataset confirmed acceptance banc proofreading data ownership guidelines. point linked Google account authorised (see ) access banc online resources. Broadly speaking bancr package largely wrapper fafbseg package setting necessary default paths etc. based another wrapper separate project, fancr. access, can view BANC data helpful neuroglancer scene. BANC project uses CAVE tables store many sorts annotation information. can see available CAVE tables BANC . CAVE tables can joined useful CAVE views pinned materialisation, can provide useful objects whole BANC edgelist. BANC view names SQL formulas given .","code":""},{"path":"https://flyconnectome.github.io/bancr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"R Client Access to the Brain And Nerve Cord (BANC) Dataset","text":"can install development version bancr github: anything useful bancr package, need authorisation access banc resources. prove authorisation programmatic access must generate store token web browser logging approved Google account. streamlined running following command R (also set Pythonic access via cloudvolume). check everything set properly, try: functions rely underlying Python code Philipp Schlegel, called using reticulate package. can install full set recommended libraries including fafbseg-py: Note package designed play nicely fafbseg, used mainly FAFB-FlyWire project, used work data many neuroglancer/CAVE based projects. get error related finding cloud-volume cloud-volume version, solution may update cloud-volume, : Use with_banc() wrap many additional fafbseg::flywire_* functions use BANC. Alternatively choose_banc() set flywire_* functions fafbseg target BANC. functions work.","code":"remotes::install_github('flyconnectome/bancr') # set up token - will open your browser to generate a new token banc_set_token()   # if you already have one do  # banc_set_token(\"<my token>\") # diagnose issues dr_banc()  # confirm functionality, should return FALSE banc_islatest(\"720575941562355975\") fafbseg::simple_python(\"full\") fafbseg::simple_python('none', pkgs='cloud-volume~=8.32.1')"},{"path":"https://flyconnectome.github.io/bancr/index.html","id":"updating","dir":"","previous_headings":"Installation","what":"Updating","title":"R Client Access to the Brain And Nerve Cord (BANC) Dataset","text":"can just repeat install instructions, ensures dependencies updated: need update specific Python library dependent, can :","code":"remotes::install_github('flyconnectome/bancr') fafbseg::simple_python(pkgs='fafbseg')"},{"path":[]},{"path":"https://flyconnectome.github.io/bancr/index.html","id":"load-the-code-we-need","dir":"","previous_headings":"Ascending Neuron Vignette","what":"Load the code we need","title":"R Client Access to the Brain And Nerve Cord (BANC) Dataset","text":"First need load package, direct BANC data set.","code":"library(bancr) # choose_banc()"},{"path":"https://flyconnectome.github.io/bancr/index.html","id":"identify-the-neurons-we-care-about","dir":"","previous_headings":"Ascending Neuron Vignette","what":"Identify the neurons we care about","title":"R Client Access to the Brain And Nerve Cord (BANC) Dataset","text":"Next, let us query BANC CAVE table order get neurons users annotated ‘ascending’ neurons, .e. neurons cell bodies dendrites ventral nerve cord, axons brain. considering neurons, decided like plot two . members cell type. identified 16-bit root_id. ID changes time neuron edited, BANC active project unstable. Likely time read , changed little, although describe cells. Therefore, let us make sure date IDs. Sometimes stable way track neuron (long cell body within BANC volume) consider nucleus_id. can get table nucleus ids CAVE find . root_id column CAVE tables automatically update.","code":"banc.neck.connective.neurons <- banc_neck_connective_neurons() head(banc.neck.connective.neurons) an1.left <- \"720575941566983162\" an1.right <- \"720575941562355975\" an1.left <- banc_latestid(an1.left) an1.right <- banc_latestid(an1.right) an1.ids <- c(an1.left, an1.right) an1.ids banc.nuclei <- banc_nuclei() banc.nuclei.an1 <- banc.nuclei[as.character(banc.nuclei$pt_root_id) %in% an1.ids,] banc.nuclei.an1.ids <- as.character(banc.nuclei.an1$id) banc.nuclei.an1"},{"path":"https://flyconnectome.github.io/bancr/index.html","id":"obtain-neuron-segmentation-data","dir":"","previous_headings":"Ascending Neuron Vignette","what":"Obtain neuron segmentation data","title":"R Client Access to the Brain And Nerve Cord (BANC) Dataset","text":"Great. Next, want read mesh objects neurons. neurons ‘BANC coordinates’, nanometers. read mesh3d objects describe triangular meshes. can also get proxy ‘L2’ skeletons segmentation graph neuron. functions depend Philipp Schlegel’s fafbseg-py library. can install using fafbseg::simple_python. See . can also get mesh3d objects nuclei.","code":"an1.left.mesh <- banc_read_neuron_meshes(an1.left) an1.right.mesh <- banc_read_neuron_meshes(an1.right) an1.left.skel <- banc_read_l2skel(an1.left) an1.right.skel <- banc_read_l2skel(an1.right) an1.left.nucleus <- banc_read_nuclei_mesh(banc.nuclei.an1.ids[1]) an1.right.nucleus <- banc_read_nuclei_mesh(banc.nuclei.an1.ids[2])"},{"path":"https://flyconnectome.github.io/bancr/index.html","id":"plot-our-banc-neurons","dir":"","previous_headings":"Ascending Neuron Vignette","what":"Plot our BANC neurons","title":"R Client Access to the Brain And Nerve Cord (BANC) Dataset","text":"can plot neurons 3D using rgl package. First, can plot BANC volume mesh shows brain tissue. can also see synaptic neuropil inside . now neurons, skeletons nuclei. can also make 2D image multiple views using ggplot2.","code":"nopen3d() banc_view() plot3d(banc.surf, col = \"lightgrey\", alpha = 0.1) plot3d(banc_neuropil.surf, col = \"lightgrey\", alpha = 0.25) # Plot neuron meshes plot3d(an1.left.mesh, col = \"coral\", alpha = 0.75) plot3d(an1.right.mesh, col = \"chartreuse\", alpha = 0.75)  # Plot neuron skeletons plot3d(an1.left.skel, col = \"darkred\", alpha = 1) plot3d(an1.right.skel, col = \"darkgreen\", alpha = 1)  # Plot nuclei meshes plot3d(an1.left.nucleus, col = \"black\", alpha = 1, add = TRUE) plot3d(an1.right.nucleus, col = \"black\", alpha = 1, add = TRUE) # Simplify meshes to  make plotting faster banc_neuropil <- Rvcg::vcgQEdecim(as.mesh3d(banc_neuropil.surf), percent = 0.1) banc_brain_neuropil <- Rvcg::vcgQEdecim(as.mesh3d(banc_brain_neuropil.surf), percent = 0.1) banc_vnc_neuropil <- Rvcg::vcgQEdecim(as.mesh3d(banc_vnc_neuropil.surf), percent = 0.1) an1.left.mesh.simp <- Rvcg::vcgQEdecim(an1.left.mesh[[1]], percent = 0.1) an1.right.mesh.simp <- Rvcg::vcgQEdecim(an1.right.mesh[[1]], percent = 0.1)  # Plot! Saves as a PNG file banc_neuron_comparison_plot(neuron1 = an1.left.mesh.simp,                            neuron2 = an1.right.mesh.simp,                            neuron1.info = \"AN1_right\",                            neuron2.info = \"AN1_left\",                            banc_neuropil = banc_neuropil,                            banc_brain_neuropil = banc_brain_neuropil,                            banc_vnc_neuropil = banc_vnc_neuropil,                            filename = \"banc_an_comparison_ggplot2.png?raw=true\")  # Tip: You may need to hit 'zoom' on the RStudio plot pane, to see finer meshes, # when filename = NULL."},{"path":"https://flyconnectome.github.io/bancr/index.html","id":"left-right-mirror-banc-neurons","dir":"","previous_headings":"Ascending Neuron Vignette","what":"Left-right mirror BANC neurons","title":"R Client Access to the Brain And Nerve Cord (BANC) Dataset","text":"Using bridge symmetric ‘template brain’ (see ), can ‘mirror’ neurons BANC even though asymmetric space. can see normal (grey) mirrored mesh (green). moment, works less well VNC brain. now plot mirrored skeletons, non-mirrored meshes comparison: can also change view see, example, brain clearly. ventral nerve cord.","code":"an1.left.skel.m <- banc_mirror(an1.left.skel, method = \"tpsreg\") an1.right.skel.m <- banc_mirror(an1.right.skel, , method = \"tpsreg\") # Set up 3D plot nopen3d() banc_view() plot3d(banc_neuropil.surf, col = \"lightgrey\", alpha = 0.1)  # Plot native neuron meshes plot3d(an1.left.mesh, col = \"coral\", alpha = 0.5) plot3d(an1.right.mesh, col = \"chartreuse\", alpha = 0.5)  # Plot mirrored neuron skeletons plot3d(an1.left.skel.m, col = \"darkred\", alpha = 1) plot3d(an1.right.skel.m, col = \"darkgreen\", alpha = 1) banc_front_view() banc_vnc_view()"},{"path":"https://flyconnectome.github.io/bancr/index.html","id":"co-plot-fafb-flywire-and-hemibrain-neurons","dir":"","previous_headings":"Ascending Neuron Vignette","what":"Co-plot FAFB-FlyWire and Hemibrain neurons","title":"R Client Access to the Brain And Nerve Cord (BANC) Dataset","text":"Jasper Phelps made BANC--JRC2018F JRC2018F--BANC transform using software Elastix. Therefore, can use transform move data transformed first JRC2018F, BANC. data BANC, JRC2018 template brain JRC2018F can bridged. can either use Elastix transform directly Elastix installed machine (implemented method=\"elastix\"). can bit journey, also implemented thin plate spine registration based Elastix transform, made applied using R package Morpho (implemented method=\"tpsreg\") . end result two methods can slightly different. Firstly, let’s just take brain part ANs , JRC2018F include brain. can now read neuron FAFB-FlyWire. already know ID comparable FAFB-FlyWire neurons fetch. need load new R package first. get known FAFB-FlyWire neurons. can Hemibrain. need load new R package first. now can get equivalent Hemibrain neuron. Now see related neurons three data sets one space. Awesome! can also see difference Elastix registration Morpho based . first need download install Elastix. , can follow instructions . Remember Elastix binaries must PATH system must able see libraries. MacOSX tricky just install use Elastix binaries directly, need instead compile ITK Elastix .","code":"# Show only the portion in the brain an1.mesh.simp <- neuronlist(an1.left.mesh.simp, an1.right.mesh.simp) an1.mesh.simp.brain  <- banc_decapitate(an1.mesh.simp, invert = TRUE)  # Convert to JRC2018F space an1.mesh.simp.brain.jrc2018f <- banc_to_JRC2018F(an1.mesh.simp.brain,                                                   method = \"tpsreg\",                                                   banc.units = \"nm\")  # Plot in JRC2018 space nopen3d() plot3d(JRC2018F.surf, col = \"lightgrey\", alpha = 0.1) plot3d(an1.mesh.simp.brain.jrc2018f, col = c(\"turquoise\", \"navy\"), alpha = 0.75, add = TRUE) if (!requireNamespace(\"remotes\")) install.packages(\"remotes\") remotes::install_github('natverse/nat.jrcbrains')  library(nat.jrcbrains)  ## You may need to download the relevant registration, if you have not already: # download_saalfeldlab_registrations() ## if you previously ran choose_banc() ## now run:  # choose_segmentation(\"flywire31\") # Which directs you towards the active FAFB-FlyWire segmentation  # Define the IDs we wish to fetch # these are from the 783 materialisation (i.e.) published version fw.an1.ids <- c(\"720575940626768442\", \"720575940636821616\")  # Get neuron meshes fw.an1.meshes <- read_cloudvolume_meshes(fw.an1.ids)  # Convert to JRC2018F fw.an1.meshes.jrc2018f <- xform_brain(fw.an1.meshes, sample = \"FAFB14\", reference = \"JRC2018F\")  # Add to plot plot3d(fw.an1.meshes.jrc2018f, col = c(\"red\",\"orange\"), alpha = 1, add = TRUE) if (!requireNamespace(\"remotes\")) install.packages(\"remotes\") remotes::install_github('flyconnectome/hemibrainr')  library(hemibrainr) # Read hemibrain neuron hb.an1 <- \"706176085\"  # Read mesh, divide by 1000 to reach microns hb.an1.mesh <- hemibrain_neuron_meshes(hb.an1)  # Transforms to JRC2018F, divide by 1000 to reach microns for JRCFIB2018F hb.an1.mesh.jrc2018f <- xform_brain(hb.an1.mesh/1000, sample = \"JRCFIB2018F\", reference = \"JRC2018F\")  # Add to plot plot3d(hb.an1.mesh.jrc2018f , col = c(\"chartreuse\"), alpha = 1, add = TRUE) # Transform with Elastix an1.mesh.simp.brain.jrc2018f.elastix <- banc_to_JRC2018F(an1.mesh.simp.brain,                                                   method = \"elastix\",                                                   banc.units = \"nm\")  # Plot in JRC2018 space nopen3d() plot3d(JRC2018F.surf, col = \"lightgrey\", alpha = 0.1) plot3d(an1.mesh.simp.brain.jrc2018f, col = \"blue\", alpha = 0.75, add = TRUE) plot3d(an1.mesh.simp.brain.jrc2018f.elastix, col = \"green\", alpha = 0.75, add = TRUE)"},{"path":"https://flyconnectome.github.io/bancr/index.html","id":"get-neurons-connectivity","dir":"","previous_headings":"Ascending Neuron Vignette","what":"Get neurons connectivity","title":"R Client Access to the Brain And Nerve Cord (BANC) Dataset","text":"","code":"an.upstream <- banc_partner_summary(an1.ids, partners = \"input\") an.downstream <- banc_partner_summary(an1.ids, partners = \"output\")  # Combine the two data frames and add a source column combined_data <- bind_rows(   mutate(an.upstream, source = \"Upstream\"),   mutate(an.downstream, source = \"Downstream\") ) %>% dplyr::filter(weight>2)  # Create the histogram ggplot(combined_data, aes(x = weight, fill = source)) +   geom_histogram(binwidth = 1, color = \"black\", alpha = 0.7, position = \"identity\") +   scale_fill_manual(values = c(\"Upstream\" = \"skyblue\", \"Downstream\" = \"orange\")) +   labs(title = \"histogram of weights: upstream vs downstream\",        x = \"Weight\",        y = \"Frequency\",        fill = \"Source\") +   theme_minimal() +   theme(     plot.title = element_text(hjust = 0.5, size = 16, face = \"bold\"),     axis.title = element_text(size = 12),     axis.text = element_text(size = 10),     legend.position = \"top\"   )"},{"path":"https://flyconnectome.github.io/bancr/index.html","id":"acknowledging-the-data-and-tools","dir":"","previous_headings":"","what":"Acknowledging the data and tools","title":"R Client Access to the Brain And Nerve Cord (BANC) Dataset","text":"BANC data needs acknowledged accordance BANC community guidelines agreement BANC consortium. use package, cite eventual BANC paper well (TBD) natverse paper (Bates et al. 2020) R package follows: Bates , Jefferis G (2024). bancr: R Client Access Brain Nerve Cord (BANC) Dataset. R package version 0.1.0, https://github.com/flyconnectome/bancr.","code":"citation(package = \"bancr\")"},{"path":"https://flyconnectome.github.io/bancr/index.html","id":"acknowledgements","dir":"","previous_headings":"","what":"Acknowledgements","title":"R Client Access to the Brain And Nerve Cord (BANC) Dataset","text":"BANC data set collected Harvard Medical School laboratory Wei-Chung Allen Lee, Minsu Kim Jasper Phelps. segmentation synapse prediction built Zetta.ai. neuron reconstruction effort hosted supported FlyWire. R package initialised using fancr package developed Greg Jefferis MRC Laboratory Molecular Biology, Cambridge. Alex Bates worked R package laboratory Rachel Wilson Harvard Medical School.","code":""},{"path":"https://flyconnectome.github.io/bancr/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"R Client Access to the Brain And Nerve Cord (BANC) Dataset","text":"Bates, Alexander Shakeel, James D. Manton, Sridhar R. Jagannathan, Marta Costa, Philipp Schlegel, Torsten Rohlfing, Gregory SXE Jefferis. 2020. Natverse, Versatile Toolbox Combining Analysing Neuroanatomical Data. eLife 9 (April). https://doi.org/10.7554/eLife.53350.","code":""},{"path":"https://flyconnectome.github.io/bancr/reference/banc.surf.html","id":null,"dir":"Reference","previous_headings":"","what":"Simplified tissue and neuropil surfaces for BANC — banc.surf","title":"Simplified tissue and neuropil surfaces for BANC — banc.surf","text":"banc.surf unsymmetrical normalised version mesh. outline dataset nanometers.banc_neuropil.surf represents synaptic neuropil. Built BANC synapse cloud, optimised include 100% bona fide presynapses. banc_neuropils.surf contains standard Ito et al., 2014 brain neuropil volumes transformed BANC space. banc_al.surf contains standard Bates Schlegel et al, 2021 right antennal lobe glomeruli brain neuropil volumes transformed BANC space. neuropils may also seen neuroglancer, . BANC neuroglaner scene can directed google cloud storage location, BANC-transformed standard neuropil meshes reside. source precomputed://gs://lee-lab_brain--nerve-cord-fly-connectome/volume_meshes can plotted neuroglancer adding location, entering Seg. pane entering number name corresponds correct mesh. data frame gives mesh name number correspondences.","code":""},{"path":"https://flyconnectome.github.io/bancr/reference/banc.surf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simplified tissue and neuropil surfaces for BANC — banc.surf","text":"","code":"banc.surf  banc_neuropil.surf  banc_brain_neuropil.surf  banc_vnc_neuropil.surf  banc_neck_connective.surf  banc_brain_neuropils.surf  banc_al.surf  banc_vnc_neuropils.surf  banc_vnc_tracts.surf  banc_vnc_nerves.surf  banc_hemibrain.surf  banc_volumes.df"},{"path":"https://flyconnectome.github.io/bancr/reference/banc.surf.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Simplified tissue and neuropil surfaces for BANC — banc.surf","text":"object class hxsurf (inherits list) length 4. object class hxsurf (inherits list) length 4. object class hxsurf (inherits list) length 4. object class hxsurf (inherits list) length 4. object class hxsurf (inherits list) length 4. object class hxsurf (inherits list) length 4. object class hxsurf length 4. object class hxsurf (inherits list) length 4. object class hxsurf (inherits list) length 4. object class hxsurf (inherits list) length 4. object class hxsurf (inherits list) length 4. object class data.frame 311 rows 3 columns.","code":""},{"path":[]},{"path":"https://flyconnectome.github.io/bancr/reference/banc.surf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simplified tissue and neuropil surfaces for BANC — banc.surf","text":"","code":"if (FALSE) { # \\dontrun{ # Depends on nat library(nat) rgl::wire3d(banc.surf) } # }"},{"path":"https://flyconnectome.github.io/bancr/reference/banc_add_synapses.html","id":null,"dir":"Reference","previous_headings":"","what":"Add synapses to neuron objects — banc_add_synapses","title":"Add synapses to neuron objects — banc_add_synapses","text":"function family adds synaptic data neuron objects neuron lists. retrieves synaptic connections attaches neuron object(s).","code":""},{"path":"https://flyconnectome.github.io/bancr/reference/banc_add_synapses.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add synapses to neuron objects — banc_add_synapses","text":"","code":"banc_add_synapses(   x,   id = NULL,   connectors = NULL,   size.threshold = 5,   remove.autapses = TRUE,   update.id = TRUE,   ... )  # S3 method for class 'neuron' banc_add_synapses(   x,   id = NULL,   connectors = NULL,   size.threshold = 5,   remove.autapses = TRUE,   update.id = TRUE,   ... )  # S3 method for class 'neuronlist' banc_add_synapses(   x,   id = NULL,   connectors = NULL,   size.threshold = 5,   remove.autapses = TRUE,   update.id = TRUE,   ... )  # Default S3 method banc_add_synapses(   x,   id = NULL,   connectors = NULL,   size.threshold = 5,   remove.autapses = TRUE,   update.id = TRUE,   ... )"},{"path":"https://flyconnectome.github.io/bancr/reference/banc_add_synapses.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add synapses to neuron objects — banc_add_synapses","text":"x neuron object, neuronlist, object add synapses id root ID neuron. NULL, uses ID neuron object connectors dataframe synaptic connections. NULL, retrieves data size.threshold Minimum size threshold synapses include remove.autapses Whether remove autapses (self-connections) update.id Logical, whether use banc_latestid update neuron's root_id fetching synapses. ... Additional arguments passed methods, nat::nlapply","code":""},{"path":"https://flyconnectome.github.io/bancr/reference/banc_add_synapses.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add synapses to neuron objects — banc_add_synapses","text":"object type x, synapses added","code":""},{"path":"https://flyconnectome.github.io/bancr/reference/banc_add_synapses.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add synapses to neuron objects — banc_add_synapses","text":"","code":"if (FALSE) { # \\dontrun{ # Get BANC ID for DNA01 id <- \"720575941572711675\" id <- banc_latestid(id)  # Get the L2 skeletons n <- banc_read_l2skel(id)  # Re-root to soma n.rerooted <- banc_reroot(n)  # Add synapse information, stored at n.syn[[1]]$connectors n.syn <- banc_add_synapses(n.rerooted)  # Split neuron n.split <- hemibrainr::flow_centrality(n.syn)  # Visualise banc_neuron_comparison_plot(n.split) } # }"},{"path":"https://flyconnectome.github.io/bancr/reference/banc_all_synapses.html","id":null,"dir":"Reference","previous_headings":"","what":"Download all of the BANC synapses as a .sqlite file that you can read lazily from later — banc_all_synapses","title":"Download all of the BANC synapses as a .sqlite file that you can read lazily from later — banc_all_synapses","text":"Download BANC synapses .sqlite file can read lazily later","code":""},{"path":"https://flyconnectome.github.io/bancr/reference/banc_all_synapses.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download all of the BANC synapses as a .sqlite file that you can read lazily from later — banc_all_synapses","text":"","code":"banc_all_synapses(   path =     c(\"gs://lee-lab_brain-and-nerve-cord-fly-connectome/synapses/v2.0/final_edgelist.csv\",     \"gs://zetta_lee_fly_cns_001_synapse/240623_run/assignment/final_edgelist.df\"),   overwrite = FALSE,   n_max = 2000,   details = FALSE,   min_size = 10,   rawcoords = FALSE )"},{"path":"https://flyconnectome.github.io/bancr/reference/banc_all_synapses.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download all of the BANC synapses as a .sqlite file that you can read lazily from later — banc_all_synapses","text":"path google storage path desired synapses file. Read using readr::read_csv. overwrite Logical, whether overwrite extant banc_data.sqlite file. n_max Numeric, maximum number rows read path just want see taster file. details Logical Whether read data columns target synapse .csv. Defaults FALSE order read essential presynapse position data. min_size Numeric, filter parameter, minimum size (nm) detected synapse. rawcoords Logical, whether convert raw coordinates nanometers. Default FALSE.","code":""},{"path":"https://flyconnectome.github.io/bancr/reference/banc_all_synapses.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download all of the BANC synapses as a .sqlite file that you can read lazily from later — banc_all_synapses","text":"data.frame","code":""},{"path":"https://flyconnectome.github.io/bancr/reference/banc_all_synapses.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Download all of the BANC synapses as a .sqlite file that you can read lazily from later — banc_all_synapses","text":"Downloads automatic Zetta.ai synapse detections BANC saves banc_data.sqlite file. done, future function read file lazily throw whole thing system memory.","code":""},{"path":[]},{"path":"https://flyconnectome.github.io/bancr/reference/banc_all_synapses.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download all of the BANC synapses as a .sqlite file that you can read lazily from later — banc_all_synapses","text":"","code":"if (FALSE) { # \\dontrun{ syns <- banc_all_synapses() } # }"},{"path":"https://flyconnectome.github.io/bancr/reference/banc_cave_client.html","id":null,"dir":"Reference","previous_headings":"","what":"Low level access to banc's CAVE annotation infrastructure — banc_cave_client","title":"Low level access to banc's CAVE annotation infrastructure — banc_cave_client","text":"Low level access banc's CAVE annotation infrastructure","code":""},{"path":"https://flyconnectome.github.io/bancr/reference/banc_cave_client.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Low level access to banc's CAVE annotation infrastructure — banc_cave_client","text":"","code":"banc_cave_client()"},{"path":"https://flyconnectome.github.io/bancr/reference/banc_cave_client.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Low level access to banc's CAVE annotation infrastructure — banc_cave_client","text":"reticulate R object wrapping python CAVEclient.","code":""},{"path":"https://flyconnectome.github.io/bancr/reference/banc_cave_client.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Low level access to banc's CAVE annotation infrastructure — banc_cave_client","text":"","code":"if (FALSE) { # \\dontrun{ fcc=banc_cave_client() tables=fcc$annotation$get_tables() fcc$materialize$get_table_metadata(tables[1]) } # }"},{"path":"https://flyconnectome.github.io/bancr/reference/banc_cave_query.html","id":null,"dir":"Reference","previous_headings":"","what":"Query banc tables in the CAVE annotation system — banc_cave_query","title":"Query banc tables in the CAVE annotation system — banc_cave_query","text":"Query banc tables CAVE annotation system","code":""},{"path":"https://flyconnectome.github.io/bancr/reference/banc_cave_query.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Query banc tables in the CAVE annotation system — banc_cave_query","text":"","code":"banc_cave_query(table, live = TRUE, ...)"},{"path":"https://flyconnectome.github.io/bancr/reference/banc_cave_query.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Query banc tables in the CAVE annotation system — banc_cave_query","text":"table name table (view, see views section) query live Whether use live query mode, updates root ids current value (another timestamp provided). Values TRUE 1 select CAVE's Live mode, 2 selects Live live mode gives access even annotations part materialisation version. See section Live Live Live queries details. ... Additional arguments passed flywire_cave_query flywire_cave_query","code":""},{"path":"https://flyconnectome.github.io/bancr/reference/banc_cave_query.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Query banc tables in the CAVE annotation system — banc_cave_query","text":"data.frame","code":""},{"path":[]},{"path":"https://flyconnectome.github.io/bancr/reference/banc_cave_query.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Query banc tables in the CAVE annotation system — banc_cave_query","text":"","code":"# \\donttest{ library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:nat’: #>  #>     intersect, setdiff, union #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union cell_info=banc_cave_query('cell_info') #> Warning: using default setting #> Error: Please install the python caveclient package: #>  This should normally work: #>  fafbseg::simple_python() #>  For more details see ?simple_python #>  #> No module named 'caveclient' cell_info %>%   filter(tag2=='anterior-posterior projection pattern') %>%   count(tag) #> Error: object 'cell_info' not found # }"},{"path":"https://flyconnectome.github.io/bancr/reference/banc_cave_tables.html","id":null,"dir":"Reference","previous_headings":"","what":"Read BANC CAVE-tables, good sources of metadata — banc_cave_tables","title":"Read BANC CAVE-tables, good sources of metadata — banc_cave_tables","text":"Read BANC CAVE-tables, good sources metadata","code":""},{"path":"https://flyconnectome.github.io/bancr/reference/banc_cave_tables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read BANC CAVE-tables, good sources of metadata — banc_cave_tables","text":"","code":"banc_cave_tables(datastack_name = NULL, select = NULL)  banc_cave_views(datastack_name = NULL, select = NULL)  banc_edgelist(   edgelist_view = c(\"synapses_250226_backbone_proofread_and_peripheral_nerves_counts\",     \"synapses_250226_backbone_proofread_counts\", \"synapses_v1_backbone_proofread_counts\"),   ... )  banc_nuclei(   rootids = NULL,   nucleus_ids = NULL,   table = c(\"both\", \"somas_v1a\", \"somas_v1b\"),   rawcoords = FALSE,   ... )  banc_cell_info(rootids = NULL, rawcoords = FALSE, ...)  banc_cell_ids(rootids = NULL, ...)  banc_neck_connective_neurons(   rootids = NULL,   table = c(\"neck_connective_y92500\", \"neck_connective_y121000\"),   ... )  banc_peripheral_nerves(rootids = NULL, ...)  banc_backbone_proofread(rootids = NULL, ...)  banc_nt_prediction(rootids = NULL, rawcoords = FALSE, ...)"},{"path":"https://flyconnectome.github.io/bancr/reference/banc_cave_tables.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read BANC CAVE-tables, good sources of metadata — banc_cave_tables","text":"datastack_name Defaults \"brain_and_nerve_cord\". See https://global.daf-apis.com/info/ options. select regex term name table want edgelist_view Character, name prepared CAVE view computes proofread-neuron edgelist. ... Additional arguments passed fafbseg::flywire_cave_query bancr:::get_cave_table_data. rootids #' @param rootids Character vector specifying one BANC rootids. convenience argument passed banc_ids allowing pass data.frames, BANC URLs simple ids. nucleus_ids Character vector specifying one BANC nucleus ids. table Character, possible alternative tables sort data frame function returns. One must chosen. rawcoords Logical, whether convert raw coordinates nanometers. Default FALSE.","code":""},{"path":"https://flyconnectome.github.io/bancr/reference/banc_cave_tables.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read BANC CAVE-tables, good sources of metadata — banc_cave_tables","text":"data.frame describing CAVE-table related BANC project. case banc_cave_tables, vector returned containing names query-able cave tables.","code":""},{"path":[]},{"path":"https://flyconnectome.github.io/bancr/reference/banc_cave_tables.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read BANC CAVE-tables, good sources of metadata — banc_cave_tables","text":"","code":"if (FALSE) { # \\dontrun{ all_banc_soma_positions <- banc_nuclei() points3d(nat::xyzmatrix(all_banc_soma_positions$pt_position)) } # }"},{"path":"https://flyconnectome.github.io/bancr/reference/banc_cellid_from_segid.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert between BANC cell ids and root ids — banc_cellid_from_segid","title":"Convert between BANC cell ids and root ids — banc_cellid_from_segid","text":"Converts BANC cell ids (survive edits) root ids (guaranteed match just one edit state). See details.","code":""},{"path":"https://flyconnectome.github.io/bancr/reference/banc_cellid_from_segid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert between BANC cell ids and root ids — banc_cellid_from_segid","text":"","code":"banc_cellid_from_segid(   rootids = NULL,   timestamp = NULL,   version = NULL,   cellid_table = NULL,   rval = c(\"ids\", \"data.frame\") )  banc_segid_from_cellid(   cellids = NULL,   timestamp = NULL,   version = NULL,   rval = c(\"ids\", \"data.frame\"),   integer64 = FALSE,   cellid_table = NULL )"},{"path":"https://flyconnectome.github.io/bancr/reference/banc_cellid_from_segid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert between BANC cell ids and root ids — banc_cellid_from_segid","text":"rootids banc root ids form understood banc_ids. default value NULL return cell ids. timestamp optional time stamp. give one version timestamp. missing, ids match live materialisation version including second edits. version optional integer CAVE materialisation version. give one version timestamp. missing, ids match live materialisation version including second edits. cellid_table Optional name cell id table (default value NULL find correct table). rval Whether return cell ids whole CAVE table additional columns. cellids Integer cell ids 1 around 20000 uniquely identify cell dataset. integer64 Whether return ids bit64::integer64 character vectors. Default value NA leaves ids unmodified.","code":""},{"path":"https://flyconnectome.github.io/bancr/reference/banc_cellid_from_segid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert between BANC cell ids and root ids — banc_cellid_from_segid","text":"Either vector ids data.frame depending rval. cell ids vector integer root ids (segment ids), character vector bit64::integer64 vector depending integer64 argument.","code":""},{"path":"https://flyconnectome.github.io/bancr/reference/banc_cellid_from_segid.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert between BANC cell ids and root ids — banc_cellid_from_segid","text":"CAVE/PyChunkedGraph assigns 64 bit integer root id bodies segmentation. root ids persistent computer science sense, often exact opposite neuroscientists might imagine. Specifically, given root id matched single edit state neuron. neuron edited, root id changes. contrast, cell ids change even face edits. However, important understand correspond specific point neuron, commonly nucleus. nucleus edited away rest neuron previously belonged, cell id associated edits effectively move . details see banc slack banc wiki.","code":""},{"path":[]},{"path":"https://flyconnectome.github.io/bancr/reference/banc_cellid_from_segid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert between BANC cell ids and root ids — banc_cellid_from_segid","text":"","code":"# \\donttest{ banc_cellid_from_segid(banc_latestid(\"720575941626035769\")) #> Error: Please install the python caveclient package: #>  This should normally work: #>  fafbseg::simple_python() #>  For more details see ?simple_python #>  #> No module named 'caveclient' # } # \\donttest{ banc_cellid_from_segid(banc_latestid(\"720575941480769421\")) #> Error: Please install the python caveclient package: #>  This should normally work: #>  fafbseg::simple_python() #>  For more details see ?simple_python #>  #> No module named 'caveclient' # }"},{"path":"https://flyconnectome.github.io/bancr/reference/banc_change_log.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch change log information for one or more neurons — banc_change_log","title":"Fetch change log information for one or more neurons — banc_change_log","text":"Fetch change log information one neurons","code":""},{"path":"https://flyconnectome.github.io/bancr/reference/banc_change_log.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetch change log information for one or more neurons — banc_change_log","text":"","code":"banc_change_log(x, tz = \"UTC\", filtered = TRUE, OmitFailures = TRUE, ...)"},{"path":"https://flyconnectome.github.io/bancr/reference/banc_change_log.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetch change log information for one or more neurons — banc_change_log","text":"x One banc ids format understandable ngl_segments tz Time zone edit timestamps. Defaults \"UTC\" .e. Universal Time, Coordinated. Set \"\" current timezone. See .POSIXct details. filtered Whether filter edits unlikely relate current state neuron (default TRUE, see details). OmitFailures Whether omit neurons API timeout error. default value (TRUE) skip errors, NA) result hard stop error. See nlapply details. ... Additional arguments passed flywire_fetch","code":""},{"path":"https://flyconnectome.github.io/bancr/reference/banc_change_log.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetch change log information for one or more neurons — banc_change_log","text":"data.frame See fabseg::flywire_change_log details","code":""},{"path":"https://flyconnectome.github.io/bancr/reference/banc_change_log.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fetch change log information for one or more neurons — banc_change_log","text":"August 2021 simple wrapper fafbseg::flywire_change_log. now old (less convenient format) available zetta API can obtained private bancr:::banc_change_log_zetta function.","code":""},{"path":"https://flyconnectome.github.io/bancr/reference/banc_change_log.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fetch change log information for one or more neurons — banc_change_log","text":"","code":"# \\donttest{ banc_change_log(\"720575941477428704\") #>    operation_id           timestamp user_id #> 0         10515 2023-11-28 22:20:43    2660 #> 1        127798 2023-12-20 06:15:55    2767 #> 2        144911 2023-12-26 00:28:30    4162 #> 3        147922 2023-12-26 06:04:13    2758 #> 4        147926 2023-12-26 06:05:40    2758 #> 5        147945 2023-12-26 06:06:56    2758 #> 6        147980 2023-12-26 06:17:43    2758 #> 7        147981 2023-12-26 06:17:44    2758 #> 8        147982 2023-12-26 06:17:47    2758 #> 9        147983 2023-12-26 06:17:47    2758 #> 10       147984 2023-12-26 06:17:50    2758 #> 11       147985 2023-12-26 06:17:51    2758 #> 12       147987 2023-12-26 06:17:56    2758 #> 13       147989 2023-12-26 06:18:02    2758 #> 14       147990 2023-12-26 06:18:27    2758 #> 15       147993 2023-12-26 06:18:32    2758 #> 16       148000 2023-12-26 06:20:22    2758 #>                          before_root_ids     after_root_ids is_merge #> 0                     720575941480769421 720575941556888079    FALSE #> 1                     720575941556888079 720575941474194206    FALSE #> 2                     720575941474194206 720575941435522834    FALSE #> 3                     720575941435522834 720575941488179406    FALSE #> 4                     720575941488179406 720575941539449692    FALSE #> 5                     720575941539449692 720575941557292526    FALSE #> 6  720575941551446830 720575941557292526 720575941503347109     TRUE #> 7  720575940543311189 720575941489220228 720575941483891974     TRUE #> 8  720575941483891974 720575941503347109 720575941477813667     TRUE #> 9  720575941125943612 720575941555221066 720575941474604865     TRUE #> 10 720575941039420897 720575941474604865 720575941447470414     TRUE #> 11 720575941477813667 720575941558385512 720575941515845036     TRUE #> 12 720575941447470414 720575941515845036 720575941547060285     TRUE #> 13 720575941547060285 720575941569217576 720575941504051269     TRUE #> 14 720575941454232760 720575941504051269 720575941636113781     TRUE #> 15 720575941513505412 720575941636113781 720575941636114037     TRUE #> 16 720575941352474137 720575941636114037 720575941477428704     TRUE #>                   user_name                     user_affiliation #> 0             Jasper Phelps                    Wei-Chung Lee lab #> 1           Allien Mae Gogo Mala Murthy Lab, Sebastian Seung Lab #> 2  David Benjamin Conquilla Mala Murthy Lab, Sebastian Seung Lab #> 3           Jacquilyn Laude Mala Murthy Lab, Sebastian Seung Lab #> 4           Jacquilyn Laude Mala Murthy Lab, Sebastian Seung Lab #> 5           Jacquilyn Laude Mala Murthy Lab, Sebastian Seung Lab #> 6           Jacquilyn Laude Mala Murthy Lab, Sebastian Seung Lab #> 7           Jacquilyn Laude Mala Murthy Lab, Sebastian Seung Lab #> 8           Jacquilyn Laude Mala Murthy Lab, Sebastian Seung Lab #> 9           Jacquilyn Laude Mala Murthy Lab, Sebastian Seung Lab #> 10          Jacquilyn Laude Mala Murthy Lab, Sebastian Seung Lab #> 11          Jacquilyn Laude Mala Murthy Lab, Sebastian Seung Lab #> 12          Jacquilyn Laude Mala Murthy Lab, Sebastian Seung Lab #> 13          Jacquilyn Laude Mala Murthy Lab, Sebastian Seung Lab #> 14          Jacquilyn Laude Mala Murthy Lab, Sebastian Seung Lab #> 15          Jacquilyn Laude Mala Murthy Lab, Sebastian Seung Lab #> 16          Jacquilyn Laude Mala Murthy Lab, Sebastian Seung Lab # }"},{"path":"https://flyconnectome.github.io/bancr/reference/banc_decapitate.html","id":null,"dir":"Reference","previous_headings":"","what":"Subset points to be in the brain or in the VNC — banc_decapitate","title":"Subset points to be in the brain or in the VNC — banc_decapitate","text":"Subset points brain VNC","code":""},{"path":"https://flyconnectome.github.io/bancr/reference/banc_decapitate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subset points to be in the brain or in the VNC — banc_decapitate","text":"","code":"banc_decapitate(x, y.cut = 325000, invert = FALSE, ...)  # S3 method for class '`NULL`' banc_decapitate(x, y.cut = 325000, invert = FALSE, ...)  # S3 method for class 'neuron' banc_decapitate(x, y.cut = 325000, invert = FALSE, ...)  # S3 method for class 'neuronlist' banc_decapitate(x, y.cut = 325000, invert = FALSE, ...)  # S3 method for class 'matrix' banc_decapitate(x, y.cut = 325000, invert = FALSE, ...)  # S3 method for class 'data.frame' banc_decapitate(x, y.cut = 325000, invert = FALSE, ...)  # S3 method for class 'mesh3d' banc_decapitate(x, y.cut = 325000, invert = FALSE, ...)  # S3 method for class 'hxsurf' banc_decapitate(x, y.cut = 325000, invert = FALSE, ...)"},{"path":"https://flyconnectome.github.io/bancr/reference/banc_decapitate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subset points to be in the brain or in the VNC — banc_decapitate","text":"x object 3d points subsetted, e.g. xyz matrix, neuron, neuronlist mesh3d object. Points must native BANC space, .e. plottable inside banc.surf. y.cut Numeric, Y-axis cut point, nanometers, BANC space, separates head neck ventral nerve cord. fitting MANC data set, cut height y.cut=5e05 seems good. invert FALSE returns brain points, TRUE returns VNC points. ... Additional arguments passed nlapply prune_vertices","code":""},{"path":"https://flyconnectome.github.io/bancr/reference/banc_decapitate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subset points to be in the brain or in the VNC — banc_decapitate","text":"Remove points midsection neck connective BANC.","code":""},{"path":[]},{"path":"https://flyconnectome.github.io/bancr/reference/banc_decapitate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Subset points to be in the brain or in the VNC — banc_decapitate","text":"","code":"# \\donttest{ # DNa02 m = banc_read_neuron_meshes(\"720575941478275714\") #>   downloading meshes #> No module named 'cloudvolume' #> Error: Please install the python cloudvolume package: #> This should normally work: #> fafbseg::simple_python('basic') #> For more details see ?simple_python or the cloud-volume docshttps://github.com/seung-lab/cloud-volume#setup #> If you have already installed cloudvolume but it is not found #> then R probably can't find the relevant version of Python #> Do: #> usethis::edit_r_environ() #>  to point to the right python #> e.g. RETICULATE_PYTHON=\"/opt/miniconda3/envs/r-reticulate/bin/python\" m.brain = banc_decapitate(m) #> Error: object 'm' not found m.vnc = banc_decapitate(m, invert = TRUE) #> Error: object 'm' not found # } if (FALSE) { # \\dontrun{ plot3d(m.brain, col = \"red\") plot3d(m.vnc, col = \"cyan\") plot3d(banc.surf, col = \"grey\", alpha = 0.1) } # }"},{"path":"https://flyconnectome.github.io/bancr/reference/banc_ggneuron.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a neuron in the BANC connectomic dataset using ggplot2 — banc_ggneuron","title":"Plot a neuron in the BANC connectomic dataset using ggplot2 — banc_ggneuron","text":"function visualizes neuron neuron-related object BANC connectomic dataset using ggplot2. thing specific BANC data set prreset 'view' angles.","code":""},{"path":"https://flyconnectome.github.io/bancr/reference/banc_ggneuron.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a neuron in the BANC connectomic dataset using ggplot2 — banc_ggneuron","text":"","code":"banc_ggneuron(   x,   volume = NULL,   info = NULL,   view = c(\"main\", \"side\", \"front\", \"vnc\", \"vnc_side\", \"brain_side\"),   cols1 = c(\"turquoise\", \"navy\"),   cols2 = c(\"grey75\", \"grey50\"),   alpha = 0.5,   title.col = \"darkgrey\",   ... )"},{"path":"https://flyconnectome.github.io/bancr/reference/banc_ggneuron.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a neuron in the BANC connectomic dataset using ggplot2 — banc_ggneuron","text":"x 'neuron', 'neuronlist', 'mesh3d', 'hxsurf' object visualized. volume brain/neuropil volume plotted grey, context. Defaults NULL, volume plotted. info Optional. string used plot title. view character string specifying view orientation. Options \"main\", \"side\", \"front\", \"vnc\", \"vnc_side\", \"brain_side\". cols1 vector two colors lowest Z values. Default c(\"turquoise\", \"navy\"). cols2 vector two colors highest Z values. Default c(\"grey75\", \"grey50\"). alpha Transparency neuron visualization. Default 0.5. title.col Color plot title. Default \"darkgrey\". ... Additional arguments passed geom_neuron().","code":""},{"path":"https://flyconnectome.github.io/bancr/reference/banc_ggneuron.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot a neuron in the BANC connectomic dataset using ggplot2 — banc_ggneuron","text":"ggplot object representing visualized neuron.","code":""},{"path":"https://flyconnectome.github.io/bancr/reference/banc_ggneuron.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot a neuron in the BANC connectomic dataset using ggplot2 — banc_ggneuron","text":"function wrapper around ggneuron function, specifically tailored BANC dataset. applies rotation matrix based specified view uses predefined color schemes.","code":""},{"path":"https://flyconnectome.github.io/bancr/reference/banc_ids.html","id":null,"dir":"Reference","previous_headings":"","what":"Return a vector of banc root ids from diverse inputs — banc_ids","title":"Return a vector of banc root ids from diverse inputs — banc_ids","text":"Return vector banc root ids diverse inputs","code":""},{"path":"https://flyconnectome.github.io/bancr/reference/banc_ids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return a vector of banc root ids from diverse inputs — banc_ids","text":"","code":"banc_ids(x, integer64 = NA)"},{"path":"https://flyconnectome.github.io/bancr/reference/banc_ids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return a vector of banc root ids from diverse inputs — banc_ids","text":"x data.frame, URL vector ids integer64 Whether return ids bit64::integer64 character vectors. Default value NA leaves ids unmodified.","code":""},{"path":"https://flyconnectome.github.io/bancr/reference/banc_ids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return a vector of banc root ids from diverse inputs — banc_ids","text":"vector ids","code":""},{"path":[]},{"path":"https://flyconnectome.github.io/bancr/reference/banc_ids.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return a vector of banc root ids from diverse inputs — banc_ids","text":"","code":"banc_ids(data.frame(rootid=\"648518346474360770\")) #> [1] \"648518346474360770\""},{"path":"https://flyconnectome.github.io/bancr/reference/banc_islatest.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if a banc root id is up to date — banc_islatest","title":"Check if a banc root id is up to date — banc_islatest","text":"Check banc root id date","code":""},{"path":"https://flyconnectome.github.io/bancr/reference/banc_islatest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if a banc root id is up to date — banc_islatest","text":"","code":"banc_islatest(x, timestamp = NULL, ...)"},{"path":"https://flyconnectome.github.io/bancr/reference/banc_islatest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if a banc root id is up to date — banc_islatest","text":"x FlyWire rootids format understandable ngl_segments including integer64 timestamp (optional) argument set endpoint - edits time ignored (see details). ... Additional arguments passed flywire_islatest","code":""},{"path":[]},{"path":"https://flyconnectome.github.io/bancr/reference/banc_islatest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if a banc root id is up to date — banc_islatest","text":"","code":"banc_islatest(\"720575941520182775\") #> [1] FALSE"},{"path":"https://flyconnectome.github.io/bancr/reference/banc_latestid.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the latest id for a banc root id — banc_latestid","title":"Find the latest id for a banc root id — banc_latestid","text":"Find latest id banc root id","code":""},{"path":"https://flyconnectome.github.io/bancr/reference/banc_latestid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the latest id for a banc root id — banc_latestid","text":"","code":"banc_latestid(   rootid,   sample = 1000L,   cloudvolume.url = NULL,   Verbose = FALSE,   ... )  banc_updateids(   x,   root.column = \"root_id\",   supervoxel.column = \"supervoxel_id\",   position.column = \"position\",   use.cave = TRUE,   serial = FALSE,   ... )"},{"path":"https://flyconnectome.github.io/bancr/reference/banc_latestid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the latest id for a banc root id — banc_latestid","text":"rootid One ore FlyWire rootids defining segment (form interpretable ngl_segments) sample absolute fractional number supervoxel ids map rootids FALSE (see details). cloudvolume.url URL CloudVolume fetch segmentation image data. default value NULL chooses flywire production segmentation dataset. Verbose set TRUE prints information fraction ... Additional arguments passed flywire_latestid x data.frame least one : root_id, pt_root_id, supervoxel_id /pt_supervoxel_id. Supervoxels preferentially used update root_id column. Else vector BANC root IDs. root.column x data.frame, root_id column wish update supervoxel.column x data.frame, supervoxel_id column wish use update root.column position.column x data.frame, position column xyz values wish use update supervoxel.column use.cave read best established CAVE tables join pt_supervoxel_id update root_id serial TRUE x vector, calls banc_updateids ID sequence bufffer connection failures. Slower.","code":""},{"path":[]},{"path":"https://flyconnectome.github.io/bancr/reference/banc_latestid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find the latest id for a banc root id — banc_latestid","text":"","code":"if (FALSE) { # \\dontrun{ banc_latestid(\"720575941520182775\") } # }"},{"path":"https://flyconnectome.github.io/bancr/reference/banc_leaves.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the supervoxel identifiers of a banc neuron — banc_leaves","title":"Find the supervoxel identifiers of a banc neuron — banc_leaves","text":"Find supervoxel identifiers banc neuron","code":""},{"path":"https://flyconnectome.github.io/bancr/reference/banc_leaves.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the supervoxel identifiers of a banc neuron — banc_leaves","text":"","code":"banc_leaves(x, integer64 = TRUE, ...)"},{"path":"https://flyconnectome.github.io/bancr/reference/banc_leaves.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the supervoxel identifiers of a banc neuron — banc_leaves","text":"x One FlyWire segment ids integer64 Whether return ids integer64 type (default, compact little fragile) rather character (FALSE). ... additional arguments passed flywire_leaves","code":""},{"path":"https://flyconnectome.github.io/bancr/reference/banc_leaves.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the supervoxel identifiers of a banc neuron — banc_leaves","text":"vector supervoxel ids","code":""},{"path":[]},{"path":"https://flyconnectome.github.io/bancr/reference/banc_leaves.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find the supervoxel identifiers of a banc neuron — banc_leaves","text":"","code":"if (FALSE) { # \\dontrun{ svids=banc_leaves(\"720575941478275714\") head(svids) } # }"},{"path":"https://flyconnectome.github.io/bancr/reference/banc_mirror.html","id":null,"dir":"Reference","previous_headings":"","what":"Mirror BANC Connectome Points — banc_mirror","title":"Mirror BANC Connectome Points — banc_mirror","text":"function mirrors 3D points BANC (Buhmann et al. Adult Neural Connectome) coordinate system transforming JRC2018F, mirroring, transforming back.","code":""},{"path":"https://flyconnectome.github.io/bancr/reference/banc_mirror.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mirror BANC Connectome Points — banc_mirror","text":"","code":"banc_mirror(   x,   banc.units = c(\"nm\", \"um\", \"raw\"),   subset = NULL,   inverse = FALSE,   transform_files = NULL,   method = c(\"tpsreg\", \"elastix\", \"navis_elastix_xform\"),   ... )"},{"path":"https://flyconnectome.github.io/bancr/reference/banc_mirror.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mirror BANC Connectome Points — banc_mirror","text":"x object containing 3D points (must compatible nat::xyzmatrix). banc.units Character string specifying banc.units input points. Must one \"nm\" (nanometers), \"um\", \"raw\" (BANC raw banc.units). Default \"nm\". subset Optional. logical vector expression subset input object. inverse Logical. used function, kept compatibility banc_to_JRC2018F. transform_files Optional. vector two file paths custom transform files. NULL, uses default files. method Character string specifying transformation method. Must either \"elastix\" \"tpsreg\". Default \"elastix\". ... Additional arguments passed nat.templatebrains::mirror_brain.","code":""},{"path":"https://flyconnectome.github.io/bancr/reference/banc_mirror.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mirror BANC Connectome Points — banc_mirror","text":"input object mirrored 3D points.","code":""},{"path":"https://flyconnectome.github.io/bancr/reference/banc_mirror.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Mirror BANC Connectome Points — banc_mirror","text":"function performs mirroring BANC points first transforming JRC2018F coordinate system, applying mirroring operation, transforming back BANC. can use either Elastix transforms thin-plate spline registration coordinate system transformations.","code":""},{"path":[]},{"path":"https://flyconnectome.github.io/bancr/reference/banc_mirror.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mirror BANC Connectome Points — banc_mirror","text":"","code":"if (FALSE) { # \\dontrun{ # Example using saved tpsreg banc_neuropil.surf.m <- banc_mirror(banc_neuropil.surf, method = \"tpsreg\") clear3d() banc_view() plot3d(banc_neuropil.surf, alpha = 0.5, col = \"lightgrey\") plot3d(banc_neuropil.surf.m, alpha = 0.5, col = \"green\")  # Example using custom Elastix transforms choose_banc() rootid <- \"720575941626035769\" neuron.mesh <- banc_read_neuron_meshes(rootid)  # Show neuron in BANC neuropil banc_view() plot3d(neuron.mesh, col = \"red\") plot3d(banc_neuropil.surf, alpha = 0.1, col = \"lightgrey\")  # Show only the portion in the brain neuron.mesh.brain <- banc_decapitate(neuron.mesh, invert = TRUE)  # Mirror in BANC space neuron.mesh.mirror <- banc_mirror(neuron.mesh.brain, transform_files = c(\"brain_240721/BANC_to_template.txt\",  \"brain_240721/template_to_BANC.txt\")) plot3d(neuron.mesh.mirror, col = \"cyan\") } # }"},{"path":"https://flyconnectome.github.io/bancr/reference/banc_mirror_tpsreg.html","id":null,"dir":"Reference","previous_headings":"","what":"Thin-Plate Spline Registration for Mirroring in BANC Space — banc_mirror_tpsreg","title":"Thin-Plate Spline Registration for Mirroring in BANC Space — banc_mirror_tpsreg","text":"thin-plate spline (TPS) registration object mirrors 3D points within BANC (Buhmann et al. Adult Neural Connectome) coordinate system.","code":""},{"path":"https://flyconnectome.github.io/bancr/reference/banc_mirror_tpsreg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Thin-Plate Spline Registration for Mirroring in BANC Space — banc_mirror_tpsreg","text":"","code":"data(banc_mirror_tpsreg)"},{"path":"https://flyconnectome.github.io/bancr/reference/banc_mirror_tpsreg.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Thin-Plate Spline Registration for Mirroring in BANC Space — banc_mirror_tpsreg","text":"object class tpsCoeff created using Morpho::computeTransform. contains following components: Lw Matrix TPS coefficients refmat Reference matrix (source landmarks) tarmat Target matrix (mirrored landmarks) lattice 3D array representing deformation grid lambda Smoothing parameter used TPS computation scale Logical indicating whether scaling used reflection Logical indicating whether reflection allowed","code":""},{"path":"https://flyconnectome.github.io/bancr/reference/banc_mirror_tpsreg.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Thin-Plate Spline Registration for Mirroring in BANC Space — banc_mirror_tpsreg","text":"Derived landmark correspondences original mirrored points BANC space, possibly utilizing transformations JRC2018F space accurate mirroring.","code":""},{"path":"https://flyconnectome.github.io/bancr/reference/banc_mirror_tpsreg.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Thin-Plate Spline Registration for Mirroring in BANC Space — banc_mirror_tpsreg","text":"TPS registration computed allow mirroring points directly within BANC coordinate system. provides smooth, interpolated transformation point BANC space mirrored counterpart, accounting asymmetries BANC reference brain.","code":""},{"path":[]},{"path":"https://flyconnectome.github.io/bancr/reference/banc_mirror_tpsreg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Thin-Plate Spline Registration for Mirroring in BANC Space — banc_mirror_tpsreg","text":"","code":"if (FALSE) { # \\dontrun{ data(banc_mirror_tpsreg)  # Mirror BANC points using the TPS registration banc_points <- matrix(rnorm(300), ncol=3)  # Example BANC points mirrored_points <- Morpho::tps3d(banc_points, banc_mirror_tpsreg) } # }"},{"path":"https://flyconnectome.github.io/bancr/reference/banc_neuron_comparison_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare two neurons from the BANC connectome dataset — banc_neuron_comparison_plot","title":"Compare two neurons from the BANC connectome dataset — banc_neuron_comparison_plot","text":"function creates visual comparison two neurons BANC (Bilateral Antennal lobe Neuron Connectome) dataset. generates four different anatomical views facilitate comparison.","code":""},{"path":"https://flyconnectome.github.io/bancr/reference/banc_neuron_comparison_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare two neurons from the BANC connectome dataset — banc_neuron_comparison_plot","text":"","code":"banc_neuron_comparison_plot(   neuron1 = NULL,   neuron2 = NULL,   neuron3 = NULL,   neuron1.info = NULL,   neuron2.info = NULL,   neuron3.info = NULL,   volume = NULL,   region = c(\"both\", \"brain\", \"vnc\"),   banc_brain_neuropil = NULL,   banc_vnc_neuropil = NULL,   banc_neuropil = NULL,   alpha = 0.5,   filename = NULL,   width = 16,   height = 16 )"},{"path":"https://flyconnectome.github.io/bancr/reference/banc_neuron_comparison_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare two neurons from the BANC connectome dataset — banc_neuron_comparison_plot","text":"neuron1 neuronlist object representing first neuron compared. neuron2 neuronlist object representing second neuron compared. neuron3 neuronlist object representing third neuron compared. neuron1.info Character, vector printed outputted ggplot reference neuron1. neuron2.info Character, vector printed outputted ggplot reference neuron2. neuron3.info Character, vector printed outputted ggplot reference neuron3. volume mesh3d  hxsurf object BANC space wish co-plot. region Character, whether plot brain area, VNC area (default). banc_brain_neuropil mesh object representing brain neuropil. Default banc_brain_neuropil.surf. banc_vnc_neuropil mesh object representing ventral nerve cord (VNC) neuropil. Default banc_vnc_neuropil.surf. banc_neuropil mesh object representing entire neuropil. Default banc_neuropil.surf. alpha Vector alpha values neurons 1, 2 3. single value, applied . filename Optional. provided, plot saved file. NULL (default), plot displayed saved. width Numeric. width output plot inches. Default 16. height Numeric. height output plot inches. Default 16.","code":""},{"path":"https://flyconnectome.github.io/bancr/reference/banc_neuron_comparison_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare two neurons from the BANC connectome dataset — banc_neuron_comparison_plot","text":"filename NULL, function returns ggplot object. filename provided, function saves plot returns invisibly.","code":""},{"path":"https://flyconnectome.github.io/bancr/reference/banc_neuron_comparison_plot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compare two neurons from the BANC connectome dataset — banc_neuron_comparison_plot","text":"function generates four views neurons: Main view Side view Front view (brain ) VNC (Ventral Nerve Cord) view view applies appropriate rotations uses different neuropil meshes backgrounds. two neurons plotted different colors (navy/turquoise neuron1, red/darkred neuron2) easy comparison.","code":""},{"path":"https://flyconnectome.github.io/bancr/reference/banc_neuron_comparison_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compare two neurons from the BANC connectome dataset — banc_neuron_comparison_plot","text":"","code":"if (FALSE) { # \\dontrun{ # Assuming neuron1 and neuron2 are valid neuron objects banc.meta <- banctable_query()  # Get some neurons to plot banc.meta.dnao1 <- subset(banc.meta, cell_type==\"DNa01\") dna01 <- banc_read_neuron_meshes(unique(banc.meta.dnao1$root_id)) banc.meta.dnao2 <- subset(banc.meta, cell_type==\"DNa02\") dna02 <- banc_read_neuron_meshes(unique(banc.meta.dnao2$root_id))  # Simplify neurons to make them easier to plot dna01 <- nat::nlapply(dna01,Rvcg::vcgQEdecim,percent = 0.1) dna02 <- nat::nlapply(dna02,Rvcg::vcgQEdecim,percent = 0.1)  # Make plot! banc_neuron_comparison_plot(dna01, dna02, neuron1.info = \"DNa01\", neuron2.info = \"DNa02\", filename = \"neuron_comparison.png\") } # }"},{"path":"https://flyconnectome.github.io/bancr/reference/banc_partner_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarise the connectivity of banc neurons — banc_partner_summary","title":"Summarise the connectivity of banc neurons — banc_partner_summary","text":"banc_partners returns details unitary synaptic connection (including xyz location).","code":""},{"path":"https://flyconnectome.github.io/bancr/reference/banc_partner_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarise the connectivity of banc neurons — banc_partner_summary","text":"","code":"banc_partner_summary(   rootids,   partners = c(\"outputs\", \"inputs\"),   synapse_table = c(\"synapses_250226\", \"synapses_v1\"),   threshold = 0,   remove_autapses = TRUE,   cleft.threshold = 0,   datastack_name = NULL,   ... )  banc_partners(   rootids,   partners = c(\"input\", \"output\"),   synapse_table = c(\"synapses_250226\", \"synapses_v1\"),   ... )"},{"path":"https://flyconnectome.github.io/bancr/reference/banc_partner_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarise the connectivity of banc neurons — banc_partner_summary","text":"rootids Character vector specifying one BANC rootids. convenience argument passed banc_ids allowing pass data.frames, BANC URLs simple ids. partners Whether fetch input output synapses . synapse_table Character, name synapse CAVE table wish use. Defaults latest. threshold flywire_partner_summary return partners greater number connections query neuron(s) (default 0 returns connections) remove_autapses flywire_partner_summary whether remove autapses (defaults TRUE) cleft.threshold threshold cleft score calculated Buhmann et al 2019 (default 0, used 30-100 increase specificity) datastack_name optional CAVE datastack_name. unset sensible default chosen. ... Additional arguments passed pbsapply","code":""},{"path":"https://flyconnectome.github.io/bancr/reference/banc_partner_summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarise the connectivity of banc neurons — banc_partner_summary","text":"data.frame","code":""},{"path":"https://flyconnectome.github.io/bancr/reference/banc_partner_summary.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Summarise the connectivity of banc neurons — banc_partner_summary","text":"note rootids pass must date. See example.","code":""},{"path":[]},{"path":"https://flyconnectome.github.io/bancr/reference/banc_partner_summary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarise the connectivity of banc neurons — banc_partner_summary","text":"","code":"if (FALSE) { # \\dontrun{ # NB id must be up to date sample_id=banc_latestid(\"720575941478275714\") head(banc_partner_summary(sample_id)) head(banc_partner_summary(sample_id, partners='inputs')) # get the latest id for an outdate banc_partner_summary(banc_latestid(\"720575941478275714\"))  ## open banc/flywire scene containing top partners library(dplyr) banc_partner_summary(banc_latestid(\"720575941478275714\"), partners='inputs') %>%   slice_max(weight, n = 20) %>%   banc_scene(open=TRUE) } # } if (FALSE) { # \\dontrun{ # plot input and output synapses of a neuron nclear3d() fpi=banc_partners(banc_latestid(\"720575941478275714\"), partners='in') points3d(banc_raw2nm(fpi$post_pt_position), col='cyan') fpo=banc_partners(banc_latestid(\"720575941478275714\"), partners='out') points3d(banc_raw2nm(fpo$pre_pt_position), col='red') } # }"},{"path":"https://flyconnectome.github.io/bancr/reference/banc_read_l2dp.html","id":null,"dir":"Reference","previous_headings":"","what":"Read L2 skeleton or dotprops for BANC neurons using fafbseg-py — banc_read_l2dp","title":"Read L2 skeleton or dotprops for BANC neurons using fafbseg-py — banc_read_l2dp","text":"banc_read_l2skel reads one neurons simplified L2 skeletons. banc_read_l2dp reads one neurons simplified dotprops format. See read_l2skel.","code":""},{"path":"https://flyconnectome.github.io/bancr/reference/banc_read_l2dp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read L2 skeleton or dotprops for BANC neurons using fafbseg-py — banc_read_l2dp","text":"","code":"banc_read_l2dp(id, OmitFailures = TRUE, dataset = NULL, ...)  banc_read_l2skel(id, OmitFailures = TRUE, dataset = NULL, ...)"},{"path":"https://flyconnectome.github.io/bancr/reference/banc_read_l2dp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read L2 skeleton or dotprops for BANC neurons using fafbseg-py — banc_read_l2dp","text":"id One flywire ids OmitFailures Whether drop neurons read results (rather erroring ). Default TRUE. dataset optional CAVE dataset name (expert use , default choose standard banc dataset). See details. ... Additional arguments passed fafbseg.flywire.l2_skeleton fafbseg.flywire.l2_dotpropsfunctions.","code":""},{"path":"https://flyconnectome.github.io/bancr/reference/banc_read_l2dp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read L2 skeleton or dotprops for BANC neurons using fafbseg-py — banc_read_l2dp","text":"neuronlist containing one neuron dotprops objects. Note neurons calibrated nm dotprops calibrated microns.","code":""},{"path":"https://flyconnectome.github.io/bancr/reference/banc_read_l2dp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read L2 skeleton or dotprops for BANC neurons using fafbseg-py — banc_read_l2dp","text":"banc_read_l2dp uses special data structure rapid download dotprops version neurons required NBLASTing. leverages python navis / fafbseg-py packages need install , typically using simple_python function. banc_read_l2skel treats dataset argument little differently banc_read_l2dp actually needs identify two data sources CAVE data See read_l2skel additional details ","code":""},{"path":"https://flyconnectome.github.io/bancr/reference/banc_read_l2dp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read L2 skeleton or dotprops for BANC neurons using fafbseg-py — banc_read_l2dp","text":"","code":"if (FALSE) { # \\dontrun{ # one time install of necessary python packages fafbseg::simple_python(pkgs=\"fafbseg\")  dna02=c(\"720575941478275714\", \"720575941512946243\") dna02.latest=banc_latestid(dna02) dna02.dps <- banc_read_l2dp(dna02.latest)  # plot those nclear3d() plot3d(dna02.dps, lwd=3) # nb dotprops are always in microns wire3d(banc.surf/1e3, col='grey')  nclear3d() dna02.skel <- banc_read_l2skel(dna02.latest) plot3d(dna02.skel, lwd=2) # nb neuron skeletons are in nm wire3d(banc.surf, col='grey') } # }"},{"path":"https://flyconnectome.github.io/bancr/reference/banc_read_neuroglancer_mesh.html","id":null,"dir":"Reference","previous_headings":"","what":"Read BANC euroglancer meshes, e.g., ROI meshes — banc_read_neuroglancer_mesh","title":"Read BANC euroglancer meshes, e.g., ROI meshes — banc_read_neuroglancer_mesh","text":"Read BANC euroglancer meshes, e.g., ROI meshes","code":""},{"path":"https://flyconnectome.github.io/bancr/reference/banc_read_neuroglancer_mesh.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read BANC euroglancer meshes, e.g., ROI meshes — banc_read_neuroglancer_mesh","text":"","code":"banc_read_neuroglancer_mesh(   x = 1,   url = paste0(\"https://www.googleapis.com/storage/v1/b/\",     \"zetta_lee_fly_cns_001_kisuk/o/final%2Fv2%2F\",     \"volume_meshes%2Fmeshes%2F{x}%3A0.drc?alt=media\",     \"&neuroglancer=610000b05b6497edcf20b78f29516970\"),   ... )"},{"path":"https://flyconnectome.github.io/bancr/reference/banc_read_neuroglancer_mesh.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read BANC euroglancer meshes, e.g., ROI meshes — banc_read_neuroglancer_mesh","text":"x numeric identifier specifies mesh read, defaults 1 BANC outline mesh. url URL directs bancr BANC meshes stored. ... additional arguments GET","code":""},{"path":"https://flyconnectome.github.io/bancr/reference/banc_read_neuroglancer_mesh.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read BANC euroglancer meshes, e.g., ROI meshes — banc_read_neuroglancer_mesh","text":"mesh3d object specified mesh.","code":""},{"path":[]},{"path":"https://flyconnectome.github.io/bancr/reference/banc_read_neuroglancer_mesh.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read BANC euroglancer meshes, e.g., ROI meshes — banc_read_neuroglancer_mesh","text":"","code":"if (FALSE) { # \\dontrun{ banc.mesh  <- banc_read_neuroglancer_mesh() } # }"},{"path":"https://flyconnectome.github.io/bancr/reference/banc_read_neuron_meshes.html","id":null,"dir":"Reference","previous_headings":"","what":"Read one or more BANC neuron and nuclei meshes — banc_read_neuron_meshes","title":"Read one or more BANC neuron and nuclei meshes — banc_read_neuron_meshes","text":"Read one BANC neuron nuclei meshes","code":""},{"path":"https://flyconnectome.github.io/bancr/reference/banc_read_neuron_meshes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read one or more BANC neuron and nuclei meshes — banc_read_neuron_meshes","text":"","code":"banc_read_neuron_meshes(ids, savedir = NULL, format = c(\"ply\", \"obj\"), ...)  banc_read_nuclei_mesh(   ids,   lod = 0L,   savedir = NULL,   method = c(\"vf\", \"ply\"),   ... )"},{"path":"https://flyconnectome.github.io/bancr/reference/banc_read_neuron_meshes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read one or more BANC neuron and nuclei meshes — banc_read_neuron_meshes","text":"ids One root ids savedir optional location save downloaded meshes. acts simple effective cache since flywire neurons change id whenever edited. format whether save meshes Wavefront obj Stanford poly format. obj default ply simpler compact format. ... Additional arguments passed fafbseg::read_cloudvolume_meshes lod level detail (highest resolution 0, default 2 gives good overall morphology 3 also useful smaller still). method treat mesh object returned neuroglancer, .e. mesh3d object ply mesh.","code":""},{"path":"https://flyconnectome.github.io/bancr/reference/banc_read_neuron_meshes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read one or more BANC neuron and nuclei meshes — banc_read_neuron_meshes","text":"neuronlist containing one mesh3d objects. See nat::read.neurons details.","code":""},{"path":[]},{"path":"https://flyconnectome.github.io/bancr/reference/banc_read_neuron_meshes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read one or more BANC neuron and nuclei meshes — banc_read_neuron_meshes","text":"","code":"# \\donttest{ neuron.mesh <- banc_read_neuron_meshes(\"720575941478275714\") #>   downloading meshes #> No module named 'cloudvolume' #> Error: Please install the python cloudvolume package: #> This should normally work: #> fafbseg::simple_python('basic') #> For more details see ?simple_python or the cloud-volume docshttps://github.com/seung-lab/cloud-volume#setup #> If you have already installed cloudvolume but it is not found #> then R probably can't find the relevant version of Python #> Do: #> usethis::edit_r_environ() #>  to point to the right python #> e.g. RETICULATE_PYTHON=\"/opt/miniconda3/envs/r-reticulate/bin/python\" plot3d(neuron.mesh, alpha = 0.1) #> Error: object 'neuron.mesh' not found nucleus.mesh <- banc_read_nuclei_mesh(\"72903876004544795\") #> No module named 'cloudvolume' #> Error: Please install the python cloudvolume package: #> This should normally work: #> fafbseg::simple_python('basic') #> For more details see ?simple_python or the cloud-volume docshttps://github.com/seung-lab/cloud-volume#setup #> If you have already installed cloudvolume but it is not found #> then R probably can't find the relevant version of Python #> Do: #> usethis::edit_r_environ() #>  to point to the right python #> e.g. RETICULATE_PYTHON=\"/opt/miniconda3/envs/r-reticulate/bin/python\" plot3d(nucleus.mesh, col = \"black\") #> Error: object 'nucleus.mesh' not found # }"},{"path":"https://flyconnectome.github.io/bancr/reference/banc_reroot.html","id":null,"dir":"Reference","previous_headings":"","what":"Re-root BANC neuron skeleton at soma — banc_reroot","title":"Re-root BANC neuron skeleton at soma — banc_reroot","text":"function re-roots neuron skeleton represented neuron object location corresponding soma roots data frame. uses root_id skeleton object identify soma location.","code":""},{"path":"https://flyconnectome.github.io/bancr/reference/banc_reroot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Re-root BANC neuron skeleton at soma — banc_reroot","text":"","code":"banc_reroot(x, id = NULL, roots = NULL, estimate = TRUE, ...)  # S3 method for class 'neuron' banc_reroot(x, id = NULL, roots = NULL, estimate = TRUE, ...)  # S3 method for class 'neuronlist' banc_reroot(x, id = NULL, roots = NULL, estimate = TRUE, ...)"},{"path":"https://flyconnectome.github.io/bancr/reference/banc_reroot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Re-root BANC neuron skeleton at soma — banc_reroot","text":"x banc.neurite object representing neuron skeleton. id (Optional) root_id neuron roots data frame. NULL, taken x$root_id slot. roots data frame containing information root points, .e. nuclei obtained using bancr:::banc_roots(). data frame assumed columns named root_id root_position_nm, root_position_nm specifies 3D coordinates soma root_id. estimate TRUE nucleus position roots, root estimated leaf node furthest outside brain neuropil. ... Methods passed nat::nlapply.","code":""},{"path":"https://flyconnectome.github.io/bancr/reference/banc_reroot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Re-root BANC neuron skeleton at soma — banc_reroot","text":"function returns re-rooted neuron object.","code":""},{"path":"https://flyconnectome.github.io/bancr/reference/banc_reroot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Re-root BANC neuron skeleton at soma — banc_reroot","text":"","code":"if (FALSE) { # \\dontrun{ x <- banc_read_l2skel(..., simplify = FALSE) roots <- bancr:::banc_roots() re-rooted_neuron <- banc_reroot(x, roots = roots) } # }"},{"path":"https://flyconnectome.github.io/bancr/reference/banc_rootid.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the root identifier of a banc neuron — banc_rootid","title":"Find the root identifier of a banc neuron — banc_rootid","text":"Find root identifier banc neuron","code":""},{"path":"https://flyconnectome.github.io/bancr/reference/banc_rootid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the root identifier of a banc neuron — banc_rootid","text":"","code":"banc_rootid(x, integer64 = FALSE, ...)"},{"path":"https://flyconnectome.github.io/bancr/reference/banc_rootid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the root identifier of a banc neuron — banc_rootid","text":"x One FlyWire segment ids integer64 Whether return ids integer64 type (compact little fragile) rather character (default FALSE). ... Additional arguments passed pbapply::pbsapply eventually Python cv$CloudVolume object.","code":""},{"path":"https://flyconnectome.github.io/bancr/reference/banc_rootid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the root identifier of a banc neuron — banc_rootid","text":"vector root ids (default character)","code":""},{"path":[]},{"path":"https://flyconnectome.github.io/bancr/reference/banc_rootid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find the root identifier of a banc neuron — banc_rootid","text":"","code":"# \\donttest{ banc_rootid(\"73186243730767724\") #> No module named 'cloudvolume' #> Error: Please install the python cloudvolume package: #> This should normally work: #> fafbseg::simple_python('basic') #> For more details see ?simple_python or the cloud-volume docshttps://github.com/seung-lab/cloud-volume#setup #> If you have already installed cloudvolume but it is not found #> then R probably can't find the relevant version of Python #> Do: #> usethis::edit_r_environ() #>  to point to the right python #> e.g. RETICULATE_PYTHON=\"/opt/miniconda3/envs/r-reticulate/bin/python\" # }"},{"path":"https://flyconnectome.github.io/bancr/reference/banc_scene.html","id":null,"dir":"Reference","previous_headings":"","what":"Return a sample Neuroglancer scene URL for BANC dataset — banc_scene","title":"Return a sample Neuroglancer scene URL for BANC dataset — banc_scene","text":"Return sample Neuroglancer scene URL BANC dataset","code":""},{"path":"https://flyconnectome.github.io/bancr/reference/banc_scene.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return a sample Neuroglancer scene URL for BANC dataset — banc_scene","text":"","code":"banc_scene(   ids = NULL,   open = FALSE,   layer = NULL,   url =     \"https://spelunker.cave-explorer.org/#!middleauth+https://global.daf-apis.com/nglstate/api/v1/6431332029693952\" )"},{"path":"https://flyconnectome.github.io/bancr/reference/banc_scene.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return a sample Neuroglancer scene URL for BANC dataset — banc_scene","text":"ids set root ids include scene. Can also data.frame. open Whether open URL browser (see browseURL) layer segmentation layer ids intended. Defaults 'segmentation proofreading', point another dataset layer. url spelunker neuroglancer URL.","code":""},{"path":"https://flyconnectome.github.io/bancr/reference/banc_scene.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return a sample Neuroglancer scene URL for BANC dataset — banc_scene","text":"character vector containing single Neuroglancer URL (invisibly open=TRUE).","code":""},{"path":"https://flyconnectome.github.io/bancr/reference/banc_scene.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Return a sample Neuroglancer scene URL for BANC dataset — banc_scene","text":"See banc slack details.","code":""},{"path":[]},{"path":"https://flyconnectome.github.io/bancr/reference/banc_scene.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return a sample Neuroglancer scene URL for BANC dataset — banc_scene","text":"","code":"if (FALSE) { # \\dontrun{ browseURL(banc_scene()) banc_scene(open=T) banc_scene(\"720575941545083784\", open=T) } # }"},{"path":"https://flyconnectome.github.io/bancr/reference/banc_set_token.html","id":null,"dir":"Reference","previous_headings":"","what":"Set the token to be used to authenticate to banc autosegmentation resources — banc_set_token","title":"Set the token to be used to authenticate to banc autosegmentation resources — banc_set_token","text":"Set token used authenticate banc autosegmentation resources","code":""},{"path":"https://flyconnectome.github.io/bancr/reference/banc_set_token.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set the token to be used to authenticate to banc autosegmentation resources — banc_set_token","text":"","code":"banc_set_token(token = NULL)"},{"path":"https://flyconnectome.github.io/bancr/reference/banc_set_token.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set the token to be used to authenticate to banc autosegmentation resources — banc_set_token","text":"token optional token string. missing prompted generate new token via browser.","code":""},{"path":"https://flyconnectome.github.io/bancr/reference/banc_set_token.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set the token to be used to authenticate to banc autosegmentation resources — banc_set_token","text":"path token file (invisibly)","code":""},{"path":"https://flyconnectome.github.io/bancr/reference/banc_to_JRC2018F.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform Points between BANC Connectome and JRC2018F Template Brain — banc_to_JRC2018F","title":"Transform Points between BANC Connectome and JRC2018F Template Brain — banc_to_JRC2018F","text":"function transforms 3D points BANC (Buhmann et al. Adult Neural Connectome) coordinate system D. melanogaster template brain JRC2018F coordinate system.","code":""},{"path":"https://flyconnectome.github.io/bancr/reference/banc_to_JRC2018F.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform Points between BANC Connectome and JRC2018F Template Brain — banc_to_JRC2018F","text":"","code":"banc_to_JRC2018F(   x,   region = c(\"brain\", \"vnc\"),   banc.units = c(\"nm\", \"um\", \"raw\"),   subset = NULL,   inverse = FALSE,   transform_file = NULL,   method = c(\"tpsreg\", \"elastix\", \"navis_elastix_xform\") )"},{"path":"https://flyconnectome.github.io/bancr/reference/banc_to_JRC2018F.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform Points between BANC Connectome and JRC2018F Template Brain — banc_to_JRC2018F","text":"x object containing 3D points (must compatible nat::xyzmatrix). region Whether transform JRC2018F brainspace (default) ot JRCVNC2018F VNC template (alternative). banc.units Character string specifying units BANC space data (input output, depending inverse argument). Must one \"nm\" (nanometers), \"um\", \"raw\" (BANC raw banc.units). Default \"nm\". subset Optional. logical vector expression subset input object. inverse Logical. TRUE, performs inverse transformation (JRC2018F BANC). Default FALSE. transform_file Optional. Path custom transform file. NULL, uses default files. method Character string specifying transformation method. Must either \"elastix\" \"tpsreg\". Default \"elastix\".","code":""},{"path":"https://flyconnectome.github.io/bancr/reference/banc_to_JRC2018F.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform Points between BANC Connectome and JRC2018F Template Brain — banc_to_JRC2018F","text":"input object transformed 3D points.","code":""},{"path":"https://flyconnectome.github.io/bancr/reference/banc_to_JRC2018F.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Transform Points between BANC Connectome and JRC2018F Template Brain — banc_to_JRC2018F","text":"function applies either Elastix transform thin-plate spline registration convert points BANC JRC2018F coordinate systems. handles unit conversions necessary. default transformation files included package located 'inst/extdata/brain_240721' directory.","code":""},{"path":[]},{"path":"https://flyconnectome.github.io/bancr/reference/banc_to_JRC2018F.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transform Points between BANC Connectome and JRC2018F Template Brain — banc_to_JRC2018F","text":"","code":"if (FALSE) { # \\dontrun{ ### BRAIN EXAMPLE #### # Transform points from BANC to JRC2018F transformed_points <- banc_to_JRC2018F(points, banc.units = \"nm\")  # Use a custom transform file custom_transformed <- banc_to_JRC2018F(points, transform_file = \"path/to/custom/transform.txt\")  # Where the default transform files are located: banc_to_JRC2018F_file <- system.file(file.path(\"extdata\",\"brain_240721\"), \"BANC_to_template.txt\", package=\"bancr\") JRC2018F_to_banc_file <- system.file(file.path(\"extdata\",\"brain_240721\"), \"template_to_BANC.txt\", package=\"bancr\")  ### VNC EXAMPLE #### library(malevnc) library(nat.jrcbrains) nat.jrcbrains::register_saalfeldlab_registrations()  # Get DNa02 axons from the MANC project DNa02s=read_manc_meshes('DNa02') plot3d(JRCVNC2018U)  # Transform into JRCVNC2918F ## nb convert from nm to microns DNa02s.jrcvnc2018f=xform_brain(DNa02s/1e3, reference = \"JRCVNC2018F\", sample=\"MANC\") plot3d(DNa02s.jrcvnc2018f, co = \"red\") plot3d(JRCVNC2018F)  # Transform into the BANC DNa02s.banc <- banc_to_JRC2018F(DNa02s.jrcvnc2018f, region=\"VNC\", method=\"tpsreg\") open3d() plot3d(DNa02s.banc, co = \"blue\") plot3d(banc_vnc_neuropil.surf)  } # }"},{"path":"https://flyconnectome.github.io/bancr/reference/banc_to_jrc2018f_tpsreg.html","id":null,"dir":"Reference","previous_headings":"","what":"Thin-Plate Spline Registration from BANC to JRC2018F template brain — banc_to_jrc2018f_tpsreg","title":"Thin-Plate Spline Registration from BANC to JRC2018F template brain — banc_to_jrc2018f_tpsreg","text":"thin-plate spline (TPS) registration object transforms 3D points BANC nanometer coordinate system D. melanogaster template brain JRC2018F coordinate system.","code":""},{"path":"https://flyconnectome.github.io/bancr/reference/banc_to_jrc2018f_tpsreg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Thin-Plate Spline Registration from BANC to JRC2018F template brain — banc_to_jrc2018f_tpsreg","text":"","code":"data(banc_to_jrc2018f_tpsreg)  jrc2018f_to_banc_tpsreg  jrcvnc2018f_to_banc_tpsreg  banc_to_jrcvnc2018f_tpsreg"},{"path":"https://flyconnectome.github.io/bancr/reference/banc_to_jrc2018f_tpsreg.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Thin-Plate Spline Registration from BANC to JRC2018F template brain — banc_to_jrc2018f_tpsreg","text":"object class tpsCoeff created using Morpho::computeTransform. contains following components: Lw Matrix TPS coefficients refmat Reference matrix (source landmarks) tarmat Target matrix (target landmarks) lattice 3D array representing deformation grid lambda Smoothing parameter used TPS computation scale Logical indicating whether scaling used reflection Logical indicating whether reflection allowed object class tpsCoeff length 4. object class tpsCoeff length 4. object class tpsCoeff length 4.","code":""},{"path":"https://flyconnectome.github.io/bancr/reference/banc_to_jrc2018f_tpsreg.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Thin-Plate Spline Registration from BANC to JRC2018F template brain — banc_to_jrc2018f_tpsreg","text":"Derived Elastix registration results using banc_to_JRC2018F function landmark correspondences extracted registration.","code":""},{"path":"https://flyconnectome.github.io/bancr/reference/banc_to_jrc2018f_tpsreg.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Thin-Plate Spline Registration from BANC to JRC2018F template brain — banc_to_jrc2018f_tpsreg","text":"TPS registration computed based landmark correspondences derived Elastix registration BANC JRC2018F spaces. provides smooth, interpolated transformation point BANC space corresponding location JRC2018F space.","code":""},{"path":[]},{"path":"https://flyconnectome.github.io/bancr/reference/banc_to_jrc2018f_tpsreg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Thin-Plate Spline Registration from BANC to JRC2018F template brain — banc_to_jrc2018f_tpsreg","text":"","code":"if (FALSE) { # \\dontrun{ data(banc_to_jrc2018f_tpsreg)  # Transform BANC points to JRC2018F using the TPS registration banc_points <- matrix(rnorm(300), ncol=3)  # Example BANC points jrc2018f_points <- Morpho::tps3d(banc_points, banc_to_jrc2018f_tpsreg) } # }"},{"path":"https://flyconnectome.github.io/bancr/reference/banc_upload_mesh.html","id":null,"dir":"Reference","previous_headings":"","what":"Upload Mesh to Google Cloud Storage for BANC Neuroglancer — banc_upload_mesh","title":"Upload Mesh to Google Cloud Storage for BANC Neuroglancer — banc_upload_mesh","text":"function uploads mesh.obj file Google Cloud Storage bucket can accessed BANC neuroglancer. uses reticulate call Python code manages conda environment. underlying Python code based bikinibottom package: https://github.com/jasper-tms/bikini-bottom/tree/main","code":""},{"path":"https://flyconnectome.github.io/bancr/reference/banc_upload_mesh.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Upload Mesh to Google Cloud Storage for BANC Neuroglancer — banc_upload_mesh","text":"","code":"banc_upload_mesh(   mesh,   mesh_id,   vol = \"precomputed://gs://lee-lab_brain-and-nerve-cord-fly-connectome/volume_meshes/\",   compress = TRUE,   overwrite = FALSE )"},{"path":"https://flyconnectome.github.io/bancr/reference/banc_upload_mesh.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Upload Mesh to Google Cloud Storage for BANC Neuroglancer — banc_upload_mesh","text":"mesh Character mesh3d object. Either path .obj file R mesh object. mesh_id Integer. ID mesh. vol Character. URL precomputed volume. compress Logical. Whether compress mesh. Default TRUE. overwrite Logical. Whether overwrite extant file name path location specified vol+mesh_id. Default FALSE.","code":""},{"path":"https://flyconnectome.github.io/bancr/reference/banc_upload_mesh.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Upload Mesh to Google Cloud Storage for BANC Neuroglancer — banc_upload_mesh","text":"Invisible NULL. function called upload effect.","code":""},{"path":"https://flyconnectome.github.io/bancr/reference/banc_upload_mesh.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Upload Mesh to Google Cloud Storage for BANC Neuroglancer — banc_upload_mesh","text":"function work global environment variable GOOGLE_APPLICATION_CREDENTIALS something like \"$HOME/.config/gcloud/legacy_credentials/firstname.secondname@gmail.com/adc.json\". file can obtains installing gsutil running gsutil init terminal.","code":""},{"path":"https://flyconnectome.github.io/bancr/reference/banc_upload_mesh.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Upload Mesh to Google Cloud Storage for BANC Neuroglancer — banc_upload_mesh","text":"bikinibottom package: https://github.com/jasper-tms/bikini-bottom/tree/main","code":""},{"path":"https://flyconnectome.github.io/bancr/reference/banc_upload_mesh.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Upload Mesh to Google Cloud Storage for BANC Neuroglancer — banc_upload_mesh","text":"","code":"if (FALSE) { # \\dontrun{ banc_upload_mesh( mesh = \"/Users/abates/projects/flyconnectome/bancpipeline/deformetrica/obj/banc_brain_neuropil.obj\", mesh_id = 3, vol = \"precomputed://gs://lee-lab_brain-and-nerve-cord-fly-connectome/volume_meshes/meshes\" ) } # }"},{"path":"https://flyconnectome.github.io/bancr/reference/banc_users.html","id":null,"dir":"Reference","previous_headings":"","what":"User information (name + CAVE ID) for active BANC users — banc_users","title":"User information (name + CAVE ID) for active BANC users — banc_users","text":"purpose table map CAVE users IDs names, order credit annotation work done BANC CAVE. information based google sheet.","code":""},{"path":"https://flyconnectome.github.io/bancr/reference/banc_users.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"User information (name + CAVE ID) for active BANC users — banc_users","text":"","code":"banc_users"},{"path":"https://flyconnectome.github.io/bancr/reference/banc_users.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"User information (name + CAVE ID) for active BANC users — banc_users","text":"object class tbl_df (inherits tbl, data.frame) 228 rows 3 columns.","code":""},{"path":"https://flyconnectome.github.io/bancr/reference/banc_users.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"User information (name + CAVE ID) for active BANC users — banc_users","text":"","code":"if (FALSE) { # \\dontrun{ View(banc_users) } # }"},{"path":"https://flyconnectome.github.io/bancr/reference/banc_view.html","id":null,"dir":"Reference","previous_headings":"","what":"Set Default View for BANC EM Dataset — banc_view","title":"Set Default View for BANC EM Dataset — banc_view","text":"function sets default view visualizing 'BANC' Electron Microscopy (EM) dataset using rgl package. adjusts viewpoint specific orientation zoom level optimal viewing particular dataset.","code":""},{"path":"https://flyconnectome.github.io/bancr/reference/banc_view.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set Default View for BANC EM Dataset — banc_view","text":"","code":"banc_view()  banc_side_view()  banc_front_view()  banc_vnc_view()  banc_vnc_side_view()  banc_brain_side_view()"},{"path":"https://flyconnectome.github.io/bancr/reference/banc_view.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set Default View for BANC EM Dataset — banc_view","text":"function called side effect changing rgl viewpoint. return value.","code":""},{"path":"https://flyconnectome.github.io/bancr/reference/banc_view.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set Default View for BANC EM Dataset — banc_view","text":"function uses rgl::rgl.viewpoint() set predefined user matrix zoom level. matrix defines rotation translation view, zoom parameter adjusts scale visualization.","code":""},{"path":"https://flyconnectome.github.io/bancr/reference/banc_view.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Set Default View for BANC EM Dataset — banc_view","text":"function assumes rgl device already open BANC EM dataset plotted. create new plot open new rgl device.","code":""},{"path":[]},{"path":"https://flyconnectome.github.io/bancr/reference/banc_view.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set Default View for BANC EM Dataset — banc_view","text":"","code":"if (FALSE) { # \\dontrun{ # Assuming you have already plotted your BANC EM data banc_view() } # }"},{"path":"https://flyconnectome.github.io/bancr/reference/banc_voxdims.html","id":null,"dir":"Reference","previous_headings":"","what":"Handle raw and nm calibrated banc coordinates — banc_voxdims","title":"Handle raw and nm calibrated banc coordinates — banc_voxdims","text":"banc_voxdims returns image voxel dimensions normally used scale raw nm coordinates.","code":""},{"path":"https://flyconnectome.github.io/bancr/reference/banc_voxdims.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Handle raw and nm calibrated banc coordinates — banc_voxdims","text":"","code":"banc_voxdims(url = choose_banc(set = FALSE)[[\"fafbseg.sampleurl\"]])  banc_nm2raw(x, vd = banc_voxdims())  banc_raw2nm(x, vd = banc_voxdims())"},{"path":"https://flyconnectome.github.io/bancr/reference/banc_voxdims.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Handle raw and nm calibrated banc coordinates — banc_voxdims","text":"url Optional neuroglancer URL containing voxel size. Defaults getOption(\"fafbseg.sampleurl\") set choose_banc. x 3D coordinates form compatible xyzmatrix vd voxel dimensions nm. Expert use . Normally found automatically.","code":""},{"path":"https://flyconnectome.github.io/bancr/reference/banc_voxdims.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Handle raw and nm calibrated banc coordinates — banc_voxdims","text":"banc_voxdims 3-vector banc_raw2nm banc_nm2raw Nx3 matrix coordinates","code":""},{"path":"https://flyconnectome.github.io/bancr/reference/banc_voxdims.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Handle raw and nm calibrated banc coordinates — banc_voxdims","text":"relies nat >= 1.10.4","code":""},{"path":"https://flyconnectome.github.io/bancr/reference/banc_voxdims.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Handle raw and nm calibrated banc coordinates — banc_voxdims","text":"","code":"banc_voxdims() #> Warning: Multiple segmentation layers. Choosing first! #>  x  y  z  #>  4  4 45  #> attr(,\"units\") #> [1] \"nm\" banc_raw2nm(c(159144, 22192, 3560)) #>           X     Y      Z #> [1,] 636576 88768 160200 banc_raw2nm('159144 22192 3560') #>           X     Y      Z #> [1,] 636576 88768 160200 if (FALSE) { # \\dontrun{ banc_nm2raw(clipr::read_clip()) } # }"},{"path":"https://flyconnectome.github.io/bancr/reference/banc_xyz2id.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert xyz locations to root or supervoxel ids — banc_xyz2id","title":"Convert xyz locations to root or supervoxel ids — banc_xyz2id","text":"Convert xyz locations root supervoxel ids","code":""},{"path":"https://flyconnectome.github.io/bancr/reference/banc_xyz2id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert xyz locations to root or supervoxel ids — banc_xyz2id","text":"","code":"banc_xyz2id(   xyz,   rawcoords = FALSE,   root = TRUE,   integer64 = FALSE,   fast_root = TRUE,   method = c(\"cloudvolume\", \"spine\"),   ... )"},{"path":"https://flyconnectome.github.io/bancr/reference/banc_xyz2id.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert xyz locations to root or supervoxel ids — banc_xyz2id","text":"xyz One xyz locations Nx3 matrix form compatible xyzmatrix including neuron mesh3d surface objects. rawcoords whether input values raw voxel indices nm root Whether return root id whole segment rather supervoxel id. integer64 Whether return ids integer64 type (compact little fragile) rather character (default FALSE). fast_root Whether use fast two-step look-procedure finding roots. strongly recommended alternative approach retained validation purposes. method Whether use spine transform-service API cloudvolume lookup. \"auto\" presently synonym \"spine\". ... additional arguments passed pbapply looking multiple positions.","code":""},{"path":"https://flyconnectome.github.io/bancr/reference/banc_xyz2id.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert xyz locations to root or supervoxel ids — banc_xyz2id","text":"character vector segment ids, NA lookup fails.","code":""},{"path":"https://flyconnectome.github.io/bancr/reference/banc_xyz2id.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert xyz locations to root or supervoxel ids — banc_xyz2id","text":"used slow supervoxel field spine. somewhat puzzled voxel dimensions banc. Neuroglancer clearly shows voxel coordinates 4.3x4.3x45. function, voxel coordinates must set 4.25 x-y give correct answers.","code":""},{"path":[]},{"path":"https://flyconnectome.github.io/bancr/reference/banc_xyz2id.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert xyz locations to root or supervoxel ids — banc_xyz2id","text":"","code":"if (FALSE) { # \\dontrun{ # a point from neuroglancer, should map to 648518346498932033 banc_xyz2id(cbind(438976,985856,215955), rawcoords=FALSE) } # }"},{"path":"https://flyconnectome.github.io/bancr/reference/bancr-package.html","id":null,"dir":"Reference","previous_headings":"","what":"bancr: R Client Access to the Brain And Nerve Cord (BANC) Dataset — bancr-package","title":"bancr: R Client Access to the Brain And Nerve Cord (BANC) Dataset — bancr-package","text":"Access BANC 'righty' EM dataset, focussing support BANC autosegmentation. Organised wrapper around fafbseg package.","code":""},{"path":[]},{"path":"https://flyconnectome.github.io/bancr/reference/bancr-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"bancr: R Client Access to the Brain And Nerve Cord (BANC) Dataset — bancr-package","text":"Maintainer: Alexnder Bates alexander.shakeel.bates@gmail.com (ORCID) Authors: Gregory Jefferis jefferis@gmail.com (ORCID)","code":""},{"path":"https://flyconnectome.github.io/bancr/reference/bancsee.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualise neurons across multiple Drosophila connectomic datasets in BANC spelunker — bancsee","title":"Visualise neurons across multiple Drosophila connectomic datasets in BANC spelunker — bancsee","text":"function constructs Neuroglancer scene visualizes neurons multiple co-registered Drosophila connectomic datasets, including BANC, FAFB, hemibrain, MANC. allows simultaneous visualization corresponding neurons across datasets.","code":""},{"path":"https://flyconnectome.github.io/bancr/reference/bancsee.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualise neurons across multiple Drosophila connectomic datasets in BANC spelunker — bancsee","text":"","code":"bancsee(   banc_ids = NULL,   fafb_ids = NULL,   hemibrain_ids = NULL,   manc_ids = NULL,   nuclei_ids = NULL,   open = FALSE,   banc.cols = c(\"#54BCD1\", \"#0000FF\", \"#8A2BE2\"),   fafb.cols = c(\"#C41E3A\", \"#FF3131\", \"#F88379\"),   hemibrain.cols = c(\"#00FF00\", \"#32CD32\", \"#006400\"),   hemibrain.mirrored.cols = c(\"#FFFF00\", \"#FFD700\", \"#FFA500\"),   manc.cols = c(\"#FFA07A\", \"#FF4500\", \"#FF8C00\"),   nulcei.col = \"#FC6882\",   url =     \"https://spelunker.cave-explorer.org/#!middleauth+https://global.daf-apis.com/nglstate/api/v1/6431332029693952\" )"},{"path":"https://flyconnectome.github.io/bancr/reference/bancsee.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualise neurons across multiple Drosophila connectomic datasets in BANC spelunker — bancsee","text":"banc_ids vector neuron IDs BANC dataset. Default NULL. fafb_ids vector neuron IDs FAFB dataset. Default NULL. hemibrain_ids vector neuron IDs hemibrain dataset. Default NULL. manc_ids vector neuron IDs MANC dataset. Default NULL. nuclei_ids vector nuclei IDs BANC dataset. Default NULL. open Logical; TRUE, function open Neuroglancer scene web browser. Default FALSE. banc.cols Vector hex codes describing colour spectrum colors interpolated BANC neurons. Defaults cyan-purple. fafb.cols Vector hex codes describing colour spectrum colors interpolated BANC neurons. Defaults red hues. hemibrain.cols Vector hex codes describing colour spectrum colors interpolated BANC neurons. Defaults  green hues. hemibrain.mirrored.cols Vector hex codes describing colour spectrum colors interpolated BANC neurons. Defaults yellow hues. manc.cols Vector hex codes describing colour spectrum colors interpolated MANC neurons. Defaults orange hues. nulcei.col Hex code colour nuclei plotted. Default pink. url spelunker neuroglancer URL.","code":""},{"path":"https://flyconnectome.github.io/bancr/reference/bancsee.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualise neurons across multiple Drosophila connectomic datasets in BANC spelunker — bancsee","text":"open = FALSE, returns character string containing URL Neuroglancer scene. open = TRUE, opens Spelunker Neuroglancer scene web browser invisibly returns URL.","code":""},{"path":"https://flyconnectome.github.io/bancr/reference/bancsee.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Visualise neurons across multiple Drosophila connectomic datasets in BANC spelunker — bancsee","text":"function creates Neuroglancer scene multiple layers, corresponding different dataset: BANC: \"segmentation proofreading\" layer FAFB: \"fafb v783 imported\" layer Hemibrain: \"hemibrain v1.2.1 imported\" \"hemibrain v1.2.1 imported, mirrored\" layers MANC: \"manc v1.2.1 imported\" layer BANC nuclei: \"nuclei (v1)\" layer dataset assigned unique color palette distinguish neurons different sources: BANC: Blue purple spectrum FAFB: Red spectrum Hemibrain: Green spectrum (original) Yellow spectrum (mirrored) MANC: Orange spectrum BANC nuclei: Pink","code":""},{"path":"https://flyconnectome.github.io/bancr/reference/bancsee.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Visualise neurons across multiple Drosophila connectomic datasets in BANC spelunker — bancsee","text":"function suppresses warnings execution. ensures smooth operation, may hide important messages. Use caution refer individual function documentation unexpected behavior occurs.","code":""},{"path":[]},{"path":"https://flyconnectome.github.io/bancr/reference/bancsee.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualise neurons across multiple Drosophila connectomic datasets in BANC spelunker — bancsee","text":"","code":"if (FALSE) { # \\dontrun{ # Visualize cell type DNa01 across datasets bancsee(banc_ids = c(\"720575941493078142\",\"720575941455137261\"),         fafb_ids = c(\"720575940644438551\",\"720575940627787609\"),         hemibrain_ids = c(\"1170939344\"),         manc_ids = c(\"10751\",\"10760\"),         open = TRUE)  # Get URL without opening browser url <- bancsee(banc_ids = c(\"720575941493078142\"),                fafb_ids = c(\"720575940644438551\"),                open = FALSE) } # }"},{"path":"https://flyconnectome.github.io/bancr/reference/banctable_query.html","id":null,"dir":"Reference","previous_headings":"","what":"Read and write to the seatable for draft BANC annotations — banctable_query","title":"Read and write to the seatable for draft BANC annotations — banctable_query","text":"functions use logic wrap code flytable_.* functions fafbseg R package. banctable_set_token obtain store permanent seatable user-level API token. banctable_query performs SQL query banctable database. can omit base argument unless tables name different bases. banctable_base returns base object (equivalent mysql database) allows access one tables, logging service necessary. returned base object give full access Python Base API allowing range row/column manipulations. banctable_update_rows updates existing rows table, returning TRUE success.","code":""},{"path":"https://flyconnectome.github.io/bancr/reference/banctable_query.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read and write to the seatable for draft BANC annotations — banctable_query","text":"","code":"banctable_query(   sql = \"SELECT * FROM banc_meta\",   limit = 200000L,   base = NULL,   python = FALSE,   convert = TRUE,   ac = NULL,   token_name = \"BANCTABLE_TOKEN\",   workspace_id = \"57832\",   retries = 10,   table.max = 10000L )  banctable_set_token(   user,   pwd,   url = \"https://cloud.seatable.io/\",   token_name = \"BANCTABLE_TOKEN\" )  banctable_login(   url = \"https://cloud.seatable.io/\",   token_name = \"BANCTABLE_TOKEN\" )  banctable_update_rows(   df,   table,   base = NULL,   append_allowed = FALSE,   chunksize = 1000L,   workspace_id = \"57832\",   token_name = \"BANCTABLE_TOKEN\",   ... )  banctable_move_to_bigdata(   table = \"banc_meta\",   base = \"banc_meta\",   url = \"https://cloud.seatable.io/\",   workspace_id = \"57832\",   token_name = \"BANCTABLE_TOKEN\",   where = \"`region` = 'optic'\",   invert = FALSE,   row_ids = NULL )  franken_meta(sql = \"SELECT * FROM franken_meta\", base = \"cns_meta\", ...)  banctable_append_rows(   df,   table,   bigdata = FALSE,   base = NULL,   chunksize = 1000L,   workspace_id = \"57832\",   token_name = \"BANCTABLE_TOKEN\",   ... )"},{"path":"https://flyconnectome.github.io/bancr/reference/banctable_query.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read and write to the seatable for draft BANC annotations — banctable_query","text":"sql SQL query string. See examples seatable docs. limit optional limit, applies specify limit directly sql query. default seatable limits SQL queries 100 rows. increase limit 100000 rows default. base Character vector specifying base python Logical. Whether return Python pandas DataFrame. default FALSE returns R data.frame convert Expert use : Whether allow Python seatable module process raw output database. principally debugging purposes. NB imposes requirement seatable_api >=2.4.0. ac seatable connection object returned banctable_login. token_name name token .Renviron file, BANCTABLE_TOKEN. workspace_id numeric id specifying workspace. Advanced use retries request seatable API fails, number times re-try 0.1 second pause. table.max maximum number rows read seatable one time, capped 10000L seatable. user, pwd banctable user password used banctable_set_token obtain token url Optional URL server df data.frame containing data upload including _id column can identify row remote table. table Character vector specifying table foe want base object. append_allowed Logical. Whether rows without row identifiers can appended. chunksize split large requests smaller ones max many rows. ... Additional arguments passed pbsapply might include cl=2 specify number parallel jobs run. Optional SQL-like clause filter rows (default: NULL moves rows) invert whether send specified rows () big data storage (FALSE) storage 'normal' table (FALSE.) row_ids Character, seatable row IDs bigdata logical, TRUE new rows added bigdata archive rather 'normal' seatable.","code":""},{"path":"https://flyconnectome.github.io/bancr/reference/banctable_query.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read and write to the seatable for draft BANC annotations — banctable_query","text":"data.frame results. 0 rows rows matched query.","code":""},{"path":[]},{"path":"https://flyconnectome.github.io/bancr/reference/banctable_query.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read and write to the seatable for draft BANC annotations — banctable_query","text":"","code":"if (FALSE) { # \\dontrun{ # Do this once banctable_set_token(user=\"MY_EMAIL_FOR_SEATABLE.com\",                     pwd=\"MY_SEATABLE_PASSWORD\",                     url=\"https://cloud.seatable.io/\")  # Thereafter: banc.meta <- banctable_query() } # }"},{"path":"https://flyconnectome.github.io/bancr/reference/check_if_possible.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if Elastix Transform is possible — check_if_possible","title":"Check if Elastix Transform is possible — check_if_possible","text":"Verifies specified transform file exists.","code":""},{"path":"https://flyconnectome.github.io/bancr/reference/check_if_possible.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if Elastix Transform is possible — check_if_possible","text":"","code":"check_if_possible(file, on_error = \"raise\")"},{"path":"https://flyconnectome.github.io/bancr/reference/check_if_possible.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if Elastix Transform is possible — check_if_possible","text":"file Path Elastix transform file. on_error Action take error: \"raise\" stop execution, value return error message.","code":""},{"path":"https://flyconnectome.github.io/bancr/reference/check_if_possible.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if Elastix Transform is possible — check_if_possible","text":"NULL file exists, error message file exist on_error \"raise\".","code":""},{"path":"https://flyconnectome.github.io/bancr/reference/choose_banc.html","id":null,"dir":"Reference","previous_headings":"","what":"Choose or (temporarily) use the banc autosegmentation — choose_banc","title":"Choose or (temporarily) use the banc autosegmentation — choose_banc","text":"Choose (temporarily) use banc autosegmentation","code":""},{"path":"https://flyconnectome.github.io/bancr/reference/choose_banc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Choose or (temporarily) use the banc autosegmentation — choose_banc","text":"","code":"choose_banc(set = TRUE)  with_banc(expr)"},{"path":"https://flyconnectome.github.io/bancr/reference/choose_banc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Choose or (temporarily) use the banc autosegmentation — choose_banc","text":"set Whether permanently set banc autosegmentation default fafbseg functions. expr expression evaluate banc default autosegmentation","code":""},{"path":"https://flyconnectome.github.io/bancr/reference/choose_banc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Choose or (temporarily) use the banc autosegmentation — choose_banc","text":"set=TRUE list containing previous values relevant global options (style options. set=FALSE named list containing option values.","code":""},{"path":"https://flyconnectome.github.io/bancr/reference/choose_banc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Choose or (temporarily) use the banc autosegmentation — choose_banc","text":"bancr inherits significant amount infrastructure fafbseg package. concept active autosegmentation, turn defines one R options containing URIs pointing voxel-wise segmentation, mesh etc data. normally contained within single neuroglancer URL points multiple data layers. banc neuroglancer scene returned banc_scene.","code":""},{"path":"https://flyconnectome.github.io/bancr/reference/choose_banc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Choose or (temporarily) use the banc autosegmentation — choose_banc","text":"","code":"if (FALSE) { # \\dontrun{ choose_banc() options()[grep(\"^fafbseg.*url\", names(options()))] } # } # \\donttest{ with_banc(fafbseg::flywire_islatest('648518346498254576')) #> [1] FALSE # } if (FALSE) { # \\dontrun{ with_banc(fafbseg::flywire_latestid('648518346498254576')) with_banc(fafbseg::flywire_latestid('648518346494405175')) } # }"},{"path":"https://flyconnectome.github.io/bancr/reference/dr_banc.html","id":null,"dir":"Reference","previous_headings":"","what":"Print information about your BANC setup including tokens and python modules — dr_banc","title":"Print information about your BANC setup including tokens and python modules — dr_banc","text":"Print information BANC setup including tokens python modules","code":""},{"path":"https://flyconnectome.github.io/bancr/reference/dr_banc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print information about your BANC setup including tokens and python modules — dr_banc","text":"","code":"dr_banc()"},{"path":[]},{"path":"https://flyconnectome.github.io/bancr/reference/dr_banc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print information about your BANC setup including tokens and python modules — dr_banc","text":"","code":"if (FALSE) { # \\dontrun{ dr_banc() } # }"},{"path":"https://flyconnectome.github.io/bancr/reference/elastix_xform.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform Elastix Transform on 3D Points — elastix_xform","title":"Perform Elastix Transform on 3D Points — elastix_xform","text":"function applies Elastix spatial transform set 3D points.","code":""},{"path":"https://flyconnectome.github.io/bancr/reference/elastix_xform.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform Elastix Transform on 3D Points — elastix_xform","text":"","code":"elastix_xform(points, transform_file, copy_files = c(), return_logs = FALSE)"},{"path":"https://flyconnectome.github.io/bancr/reference/elastix_xform.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform Elastix Transform on 3D Points — elastix_xform","text":"points matrix 3 columns data frame x, y, z columns representing 3D points. transform_file Path Elastix transform file, usually .txt file, usually .txt file. copy_files Vector additional file paths copy temporary directory. return_logs Logical, TRUE, returns Elastix log instead transformed points.","code":""},{"path":"https://flyconnectome.github.io/bancr/reference/elastix_xform.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform Elastix Transform on 3D Points — elastix_xform","text":"matrix transformed 3D points, Elastix logs return_logs TRUE.","code":""},{"path":"https://flyconnectome.github.io/bancr/reference/elastix_xform.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Perform Elastix Transform on 3D Points — elastix_xform","text":"function requires Elastix installed added system PATH. creates temporary directory processing, applies Elastix transform, cleans afterwards.","code":""},{"path":"https://flyconnectome.github.io/bancr/reference/elastix_xform.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform Elastix Transform on 3D Points — elastix_xform","text":"","code":"if (FALSE) { # \\dontrun{ points <- matrix(rnorm(30), ncol = 3) transformed_points <- elastix_xform(points, \"path/to/transform.txt\") } # }"},{"path":"https://flyconnectome.github.io/bancr/reference/geom_neuron.html","id":null,"dir":"Reference","previous_headings":"","what":"Create ggplot2 Geom Layer for Neuron Visualization — geom_neuron","title":"Create ggplot2 Geom Layer for Neuron Visualization — geom_neuron","text":"function creates ggplot2 geom layer visualizing neuron objects. supports 'neuron', 'neuronlist', 'mesh3d' objects.","code":""},{"path":"https://flyconnectome.github.io/bancr/reference/geom_neuron.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create ggplot2 Geom Layer for Neuron Visualization — geom_neuron","text":"","code":"geom_neuron(   x,   rotation_matrix = NULL,   root = 3,   cols = c(\"navy\", \"turquoise\"),   stat = \"identity\",   position = \"identity\",   na.rm = FALSE,   show.legend = NA,   inherit.aes = FALSE,   ... )  # S3 method for class 'neuron' geom_neuron(   x = NULL,   rotation_matrix = NULL,   root = 3,   cols = c(\"navy\", \"turquoise\"),   stat = \"identity\",   position = \"identity\",   na.rm = FALSE,   show.legend = NA,   inherit.aes = FALSE,   ... )  # S3 method for class 'neuronlist' geom_neuron(   x = NULL,   rotation_matrix = NULL,   root = 3,   cols = c(\"navy\", \"turquoise\"),   stat = \"identity\",   position = \"identity\",   na.rm = FALSE,   show.legend = NA,   inherit.aes = FALSE,   ... )  # S3 method for class 'mesh3d' geom_neuron(   x = NULL,   rotation_matrix = NULL,   root = 3,   cols = c(\"navy\", \"turquoise\"),   stat = \"identity\",   position = \"identity\",   na.rm = FALSE,   show.legend = NA,   inherit.aes = FALSE,   ... )  # S3 method for class 'hxsurf' geom_neuron(   x = NULL,   rotation_matrix = NULL,   root = 3,   cols = c(\"navy\", \"turquoise\"),   stat = \"identity\",   position = \"identity\",   na.rm = FALSE,   show.legend = NA,   inherit.aes = FALSE,   ... )  # S3 method for class '`NULL`' geom_neuron(   x = NULL,   rotation_matrix = NULL,   root = 3,   cols = c(\"navy\", \"turquoise\"),   stat = \"identity\",   position = \"identity\",   na.rm = FALSE,   show.legend = NA,   inherit.aes = FALSE,   ... )  # S3 method for class 'list' geom_neuron(   x = NULL,   rotation_matrix = NULL,   root = 3,   cols = c(\"navy\", \"turquoise\"),   stat = \"identity\",   position = \"identity\",   na.rm = FALSE,   show.legend = NA,   inherit.aes = FALSE,   ... )  # S3 method for class 'matrix' geom_neuron(   x = NULL,   rotation_matrix = NULL,   root = 3,   cols = c(\"navy\", \"turquoise\"),   stat = \"identity\",   position = \"identity\",   na.rm = FALSE,   show.legend = NA,   inherit.aes = FALSE,   ... )  # S3 method for class 'data.frame' geom_neuron(   x = NULL,   rotation_matrix = NULL,   root = 3,   cols = c(\"navy\", \"turquoise\"),   stat = \"identity\",   position = \"identity\",   na.rm = FALSE,   show.legend = NA,   inherit.aes = FALSE,   ... )  # S3 method for class 'dotprops' geom_neuron(   x = NULL,   rotation_matrix = NULL,   root = 3,   cols = c(\"navy\", \"turquoise\"),   stat = \"identity\",   position = \"identity\",   na.rm = FALSE,   show.legend = NA,   inherit.aes = FALSE,   ... )  # S3 method for class 'synapticneuron' geom_neuron(   x = NULL,   rotation_matrix = NULL,   root = 3,   cols = c(\"navy\", \"turquoise\"),   stat = \"identity\",   position = \"identity\",   na.rm = FALSE,   show.legend = NA,   inherit.aes = FALSE,   ... )  # S3 method for class 'splitneuron' geom_neuron(   x = NULL,   rotation_matrix = NULL,   root = 3,   cols = c(\"navy\", \"turquoise\"),   stat = \"identity\",   position = \"identity\",   na.rm = FALSE,   show.legend = NA,   inherit.aes = FALSE,   ... )"},{"path":"https://flyconnectome.github.io/bancr/reference/geom_neuron.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create ggplot2 Geom Layer for Neuron Visualization — geom_neuron","text":"x 'neuron', 'neuronlist', 'mesh3d' object visualized. rotation_matrix optional 4x4 rotation matrix apply neuron coordinates. root Numeric, >0 x contains neuron objects, root node plotted dot size root. FALSE 0 root node plotted. cols color plot neurons . length(cols)==length(x) neuron coloured index x applied cols. stat statistical transformation use data layer. position Position adjustment, either string, result call position adjustment function. na.rm FALSE, default, missing values removed warning. TRUE, missing values silently removed. show.legend logical. layer included legends? NA, default, includes aesthetics mapped. inherit.aes FALSE, overrides default aesthetics, rather combining . ... arguments passed layer().","code":""},{"path":"https://flyconnectome.github.io/bancr/reference/geom_neuron.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create ggplot2 Geom Layer for Neuron Visualization — geom_neuron","text":"list ggplot2 geom layers visualizing neuron.","code":""},{"path":"https://flyconnectome.github.io/bancr/reference/geom_neuron.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create ggplot2 Geom Layer for Neuron Visualization — geom_neuron","text":"","code":"if (FALSE) { # \\dontrun{ library(ggplot2) ggplot() + geom_neuron(nat::Cell07PNs[[1]], root = 10) ggplot() + geom_neuron(nat::Cell07PNs) ggplot() + geom_neuron(nat::MBL.surf) } # }"},{"path":"https://flyconnectome.github.io/bancr/reference/ggneuron.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a ggplot2 Visualisation of Neuron Objects — ggneuron","title":"Create a ggplot2 Visualisation of Neuron Objects — ggneuron","text":"function creates complete ggplot2 visualization neuron objects, including 'neuron', 'neuronlist', 'mesh3d', 'hxsurf' objects. sets minimal theme applies consistent styling plot.","code":""},{"path":"https://flyconnectome.github.io/bancr/reference/ggneuron.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a ggplot2 Visualisation of Neuron Objects — ggneuron","text":"","code":"ggneuron(   x,   volume = NULL,   info = NULL,   rotation_matrix = NULL,   cols1 = c(\"turquoise\", \"navy\"),   cols2 = c(\"grey75\", \"grey50\"),   alpha = 0.5,   title.col = \"darkgrey\",   ... )"},{"path":"https://flyconnectome.github.io/bancr/reference/ggneuron.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a ggplot2 Visualisation of Neuron Objects — ggneuron","text":"x 'neuron', 'neuronlist', 'mesh3d', 'hxsurf' object visualized. volume brain/neuropil volume plotted grey, context. Defaults NULL, volume plotted. info Optional. string used plot title. rotation_matrix optional 4x4 rotation matrix apply neuron coordinates. cols1 Color lowest Z values. Default \"turquoise\". cols2 Color highest Z values. Default \"navy\". alpha Transparency neuron visualization. Default 0.5. title.col Color plot title. Default \"darkgrey\". ... Additional arguments passed geom_neuron().","code":""},{"path":"https://flyconnectome.github.io/bancr/reference/ggneuron.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a ggplot2 Visualisation of Neuron Objects — ggneuron","text":"ggplot2 object representing neuron visualization.","code":""},{"path":"https://flyconnectome.github.io/bancr/reference/ggneuron.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a ggplot2 Visualisation of Neuron Objects — ggneuron","text":"function wraps around geom_neuron() create complete plot consistent, minimal theme. removes axes, legends, extraneous elements focus neuron visualization .","code":""},{"path":[]},{"path":"https://flyconnectome.github.io/bancr/reference/ggneuron.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a ggplot2 Visualisation of Neuron Objects — ggneuron","text":"","code":"if (FALSE) { # \\dontrun{ # Visualize the banc volume ggneuron(banc_neuropil.surf, banc.surf)  # Visualize the banc brain neuropil ggneuron(banc_neuropil.surf, rotation_matrix = bancr:::banc_rotation_matrices[[\"front\"]])  # See constituents of a neuronlist ggneuron(nat::Cell07PNs, volume = nat::MBL.surf, root = 10, high = \"red\", low = \"black\") } # }"},{"path":"https://flyconnectome.github.io/bancr/reference/ggplot2_neuron_path.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Neuron Objects to ggplot2-Compatible Data — ggplot2_neuron_path","title":"Convert Neuron Objects to ggplot2-Compatible Data — ggplot2_neuron_path","text":"function converts 'neuron', 'mesh3d', 'neuronlist' objects, represent 3D points linked lines space, data frames describe paths compatible ggplot2's geom_path, geom_polygon mesh3d objects.","code":""},{"path":"https://flyconnectome.github.io/bancr/reference/ggplot2_neuron_path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Neuron Objects to ggplot2-Compatible Data — ggplot2_neuron_path","text":"","code":"ggplot2_neuron_path(x, rotation_matrix = NULL, ...)  # S3 method for class 'neuron' ggplot2_neuron_path(x, rotation_matrix = NULL, ...)  # S3 method for class 'neuronlist' ggplot2_neuron_path(x, rotation_matrix = NULL, ...)  # S3 method for class 'mesh3d' ggplot2_neuron_path(x, rotation_matrix = NULL, ...)  # S3 method for class '`NULL`' ggplot2_neuron_path(x, rotation_matrix = NULL, ...)"},{"path":"https://flyconnectome.github.io/bancr/reference/ggplot2_neuron_path.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Neuron Objects to ggplot2-Compatible Data — ggplot2_neuron_path","text":"x 'neuron', 'neuronlist', 'mesh3d' object converted. rotation_matrix optional 4x4 rotation matrix apply neuron coordinates. ... Additional arguments passed methods.","code":""},{"path":"https://flyconnectome.github.io/bancr/reference/ggplot2_neuron_path.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Neuron Objects to ggplot2-Compatible Data — ggplot2_neuron_path","text":"data frame columns X, Y, Z, group, group represents continuous path neuron polygon mesh.","code":""},{"path":"https://flyconnectome.github.io/bancr/reference/ggplot2_neuron_path.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert Neuron Objects to ggplot2-Compatible Data — ggplot2_neuron_path","text":"","code":"if (FALSE) { # \\dontrun{ # Convert a neuron object neuron_data <- ggplot2_neuron_path(my_neuron)  # Convert a neuronlist object neuronlist_data <- ggplot2_neuron_path(my_neuronlist)  # Convert a mesh3d object mesh_data <- ggplot2_neuron_path(my_mesh) } # }"},{"path":"https://flyconnectome.github.io/bancr/reference/navis_elastix_xform.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply Elastix Transform using Navis — navis_elastix_xform","title":"Apply Elastix Transform using Navis — navis_elastix_xform","text":"Applies Elastix transform 3D points using Navis Python library.","code":""},{"path":"https://flyconnectome.github.io/bancr/reference/navis_elastix_xform.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply Elastix Transform using Navis — navis_elastix_xform","text":"","code":"navis_elastix_xform(x, transform_file)"},{"path":"https://flyconnectome.github.io/bancr/reference/navis_elastix_xform.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply Elastix Transform using Navis — navis_elastix_xform","text":"x Matrix data frame 3D points. transform_file Path Elastix transform file, usually .txt file.","code":""},{"path":"https://flyconnectome.github.io/bancr/reference/navis_elastix_xform.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply Elastix Transform using Navis — navis_elastix_xform","text":"matrix transformed 3D points.","code":""},{"path":"https://flyconnectome.github.io/bancr/reference/navis_elastix_xform.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Apply Elastix Transform using Navis — navis_elastix_xform","text":"function requires reticulate R package Navis Python library.","code":""},{"path":"https://flyconnectome.github.io/bancr/reference/navis_elastix_xform.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply Elastix Transform using Navis — navis_elastix_xform","text":"","code":"if (FALSE) { # \\dontrun{ neuron.mesh <- banc_read_neuron_meshes(\"720575941478275714\") points <- nat::xyzmatrix(neuron.mesh) transformed_points <- navis_elastix_xform(points, transform_file = \"brain_240721/BANC_to_template.txt\") points3d(points) plot3d(nat.flybrains::JRC2018F) } # }"},{"path":"https://flyconnectome.github.io/bancr/reference/read_elastix_output_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Read Elastix Output File — read_elastix_output_file","title":"Read Elastix Output File — read_elastix_output_file","text":"Reads parses output file produced Elastix transform.","code":""},{"path":"https://flyconnectome.github.io/bancr/reference/read_elastix_output_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read Elastix Output File — read_elastix_output_file","text":"","code":"read_elastix_output_file(filepath)"},{"path":"https://flyconnectome.github.io/bancr/reference/read_elastix_output_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read Elastix Output File — read_elastix_output_file","text":"filepath Path Elastix output file.","code":""},{"path":"https://flyconnectome.github.io/bancr/reference/read_elastix_output_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read Elastix Output File — read_elastix_output_file","text":"matrix transformed 3D points.","code":""},{"path":"https://flyconnectome.github.io/bancr/reference/write_elastix_input_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Write Elastix Input File — write_elastix_input_file","title":"Write Elastix Input File — write_elastix_input_file","text":"Writes 3D points file format required Elastix.","code":""},{"path":"https://flyconnectome.github.io/bancr/reference/write_elastix_input_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write Elastix Input File — write_elastix_input_file","text":"","code":"write_elastix_input_file(points, filepath)"},{"path":"https://flyconnectome.github.io/bancr/reference/write_elastix_input_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write Elastix Input File — write_elastix_input_file","text":"points Matrix 3D points. filepath Path input file written.","code":""},{"path":"https://flyconnectome.github.io/bancr/news/index.html","id":"bancr-040","dir":"Changelog","previous_headings":"","what":"bancr 0.4.0","title":"bancr 0.4.0","text":"Update spine URL banc4to3() cope server move (#5, @jefferis) banc surf mesh @dokato https://github.com/flyconnectome/bancr/pull/4 banc manc registration added @dokato https://github.com/flyconnectome/bancr/pull/3","code":""},{"path":"https://flyconnectome.github.io/bancr/news/index.html","id":"new-contributors-0-4-0","dir":"Changelog","previous_headings":"","what":"New Contributors","title":"bancr 0.4.0","text":"@dokato made first contribution https://github.com/flyconnectome/bancr/pull/4 Full Changelog: https://github.com/flyconnectome/bancr/compare/v0.3.0…v0.4.0","code":""},{"path":"https://flyconnectome.github.io/bancr/news/index.html","id":"bancr-030","dir":"Changelog","previous_headings":"","what":"bancr 0.3.0","title":"bancr 0.3.0","text":"switch CAVE infrastructure rather Zetta. See https://global.daf-apis.com/info/ (#1) includes update return format banc_change_log() may find need generate new token banc_set_token()","code":""},{"path":"https://flyconnectome.github.io/bancr/news/index.html","id":"bancr-020","dir":"Changelog","previous_headings":"","what":"bancr 0.2.0","title":"bancr 0.2.0","text":"Fast banc_xyz2id() mapping using Itanna (spine) services (now thousands per second rather 10s) Added banc_change_log() Added dr_banc() function Added NEWS.md file track changes package.","code":""}]
