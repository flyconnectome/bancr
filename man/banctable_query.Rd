% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/banc-table.R
\name{banctable_query}
\alias{banctable_query}
\alias{banctable_set_token}
\alias{banctable_login}
\alias{banctable_update_rows}
\alias{banctable_move_to_bigdata}
\alias{franken_meta}
\alias{banctable_append_rows}
\title{Read and write to the seatable for draft BANC annotations}
\usage{
banctable_query(
  sql = "SELECT * FROM banc_meta",
  limit = 200000L,
  base = NULL,
  python = FALSE,
  convert = TRUE,
  ac = NULL,
  token_name = "BANCTABLE_TOKEN",
  workspace_id = "57832"
)

banctable_set_token(
  user,
  pwd,
  url = "https://cloud.seatable.io/",
  token_name = "BANCTABLE_TOKEN"
)

banctable_login(
  url = "https://cloud.seatable.io/",
  token_name = "BANCTABLE_TOKEN"
)

banctable_update_rows(
  df,
  table,
  base = NULL,
  append_allowed = FALSE,
  chunksize = 1000L,
  workspace_id = "57832",
  token_name = "BANCTABLE_TOKEN",
  ...
)

banctable_move_to_bigdata(
  table = "banc_meta",
  base = "banc_meta",
  url = "https://cloud.seatable.io/",
  workspace_id = "57832",
  token_name = "BANCTABLE_TOKEN",
  where = "`region` = 'optic'",
  invert = FALSE
)

franken_meta(sql = "SELECT * FROM franken_meta", base = "cns_meta", ...)

banctable_append_rows(
  df,
  table,
  bigdata = FALSE,
  base = NULL,
  chunksize = 1000L,
  workspace_id = "57832",
  token_name = "BANCTABLE_TOKEN",
  ...
)
}
\arguments{
\item{sql}{A SQL query string. See examples and
\href{https://seatable.github.io/seatable-scripts/python/query/}{seatable
docs}.}

\item{limit}{An optional limit, which only applies if you do not specify a
limit directly in the \code{sql} query. By default seatable limits SQL
queries to 100 rows. We increase the limit to 100000 rows by default.}

\item{base}{Character vector specifying the \code{base}}

\item{python}{Logical. Whether to return a Python pandas DataFrame. The default of FALSE returns an R data.frame}

\item{convert}{Expert use only: Whether or not to allow the Python seatable
module to process raw output from the database. This is is principally for
debugging purposes. NB this imposes a requirement of seatable_api >=2.4.0.}

\item{ac}{A seatable connection object as returned by \code{banctable_login}.}

\item{token_name}{The name of the token in your .Renviron file, should be \code{BANCTABLE_TOKEN}.}

\item{workspace_id}{A numeric id specifying the workspace. Advanced use only}

\item{user, pwd}{banctable user and password used by \code{banctable_set_token}
to obtain a token}

\item{url}{Optional URL to the server}

\item{df}{A data.frame containing the data to upload including an \verb{_id}
column that can identify each row in the remote table.}

\item{table}{Character vector specifying a table foe which you want a
\code{base} object.}

\item{append_allowed}{Logical. Whether rows without row identifiers can be appended.}

\item{chunksize}{To split large requests into smaller ones with max this many rows.}

\item{...}{Additional arguments passed to pbsapply which might include cl=2 to specify a number of parallel jobs to run.}

\item{where}{Optional SQL-like where clause to filter rows (default: NULL moves all rows)}

\item{invert}{whether to send the specified rows (\code{where}) to big data storage (\code{FALSE}) or from storage to the 'normal' table (\code{FALSE}.)}

\item{bigdata}{logical, if \code{TRUE} new rows are added to the bigdata archive rather than the 'normal' seatable.}
}
\value{
a \code{data.frame} of results. There should be 0 rows if no rows
matched query.
}
\description{
These functions use the logic and wrap some code
from the \verb{flytable_.*} functions in the \code{fafbseg} R package.
\code{banctable_set_token} will obtain and store a permanent
seatable user-level API token.
\code{banctable_query} performs a SQL query against a banctable
database. You can omit the \code{base} argument unless you have tables of
the same name in different bases.
\code{banctable_base} returns a \code{base} object (equivalent to
a mysql database) which allows you to access one or more tables, logging in
to the service if necessary. The returned base object give you full access
to the Python
\href{https://seatable.github.io/seatable-scripts/python/base/}{\code{Base}}
API allowing a range of row/column manipulations.
\code{banctable_update_rows} updates existing rows in a table, returning TRUE on success.
}
\examples{
\dontrun{
# Do this once
banctable_set_token(user="MY_EMAIL_FOR_SEATABLE.com",
                    pwd="MY_SEATABLE_PASSWORD",
                    url="https://cloud.seatable.io/")

# Thereafter:
banc.meta <- banctable_query()
}
}
\seealso{
\code{fafbseg::\link{flytable_query}}
}
